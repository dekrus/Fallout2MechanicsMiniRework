#define critter_art_fid(critter_obj)   (obj_art_fid(critter_obj) bwand 0xFFFF0FFF)
#define art_exists_death_anim(critter_obj,ANIM_num)  (art_exists((obj_art_fid(critter_obj) bwand 0xFF00FFFF) bwor (ANIM_num * 0x10000 + 0x10000000)))
#define art_exists_basic_anim(critter_obj,ANIM_num)  (art_exists((obj_art_fid(critter_obj) bwand 0xFF00FFFF) bwor (ANIM_num * 0x10000)))
#define can_use_weapon(critter_obj,weaponAnim)    (art_exists((obj_art_fid(critter_obj) bwand 0xFFFF0FFF) bwor (weaponAnim * 0x1000)))
#define crit_is_moving(critter_obj)    ( (art_anim(obj_art_fid(critter_obj)) == ANIM_walk) or (art_anim(critter_art_fid(critter_obj)) == ANIM_running) )

#define weak_fid(critter_obj)          (critter_art_fid(critter_obj) == FID_NFTRMP or \
                                       (critter_art_fid(critter_obj) == FID_NMOLDD andAlso get_critter_stat(critter_obj,STAT_st) <= 5) or \
                                       (critter_art_fid(critter_obj) == FID_NFBRLP andAlso dude_gender == GENDER_MALE andAlso get_critter_stat(critter_obj,STAT_st) <= 4) or \
                                       critter_art_fid(critter_obj) == FID_NMLOSR)

#define tough_fid(critter_fid)         (critter_fid == FID_NMBOXX or \
                                       critter_fid == FID_NMMEXI or \
                                       critter_fid == FID_NMWARR or \
                                       critter_fid == FID_NMMAXX or \
                                       critter_fid == FID_NMLTHR or \
                                       critter_fid == FID_NFMAXX or \
                                       critter_fid == FID_NFMETL or \
                                       critter_fid == FID_HMWARR or \
                                       critter_fid == FID_HMMAXX or \
                                       critter_fid == FID_HMLTHR or \
                                       critter_fid == FID_HMMETL or \
                                       critter_fid == FID_HFMAXX or \
                                       critter_fid == FID_HFLTHR or \
                                       critter_fid == FID_HFMETL or \
                                       critter_fid == FID_HMBMET)

#define military_fid(critter_fid)      (critter_fid == FID_HMCMBT or \
                                       critter_fid == FID_HFCMBT or \
                                       critter_fid == FID_NMRGNG or \
                                       critter_fid == FID_NMGANG or \
                                       critter_fid == FID_NMCOPP or \
                                       critter_fid == FID_NMBONC or \
                                       critter_fid == FID_NMBRSR)

#define power_armor_fid(critter_fid)   (critter_fid == FID_HAPOWR or \
                                       critter_fid == FID_NAPOWR or \
                                       critter_fid == FID_HANPWR or \
                                       critter_fid == FID_MABOSS)

#define msg_file "gl_Stealing_mod.msg"
#define msg_cant_steal1 1
#define msg_cant_plant1 2
#define msg_cant_steal2 3
#define msg_cant_plant2 4
#define msg_hands_broken 5
#define msg_witnesses 6
#define msg_weak1 7
#define msg_weak2 8
#define msg_cant_pickpocket 9
#define msg_caught1 10
#define msg_caught2 11
#define msg_caught3 12
#define msg_caught4 13
#define msg_caught5 14
#define msg_caught6 15
#define msg_caught7 16
#define msg_steal_caught_original 17
#define msg_steal_succes 18
#define msg_plant_caught_original 19
#define msg_plant_succes 20
#define msg_return_stolen 21
#define msg_stolen_hided_part 22
#define msg_return_stole_part 23
#define msg_stolen_hided_all 24
#define msg_return_stole_none 25
#define msg_you_were_head_hit_for 26
#define msg_hit_point 27
#define msg_hit_points 28
#define msg_you_were_hit_for_0 29
#define msg_was_hit 30
#define msg_puts_some 31
#define msg_puts_some_pretend 32
#define msg_return_stolen_and_takes 33
#define msg_takes 34
#define msg_from_cash 35
#define msg_finds_nothing 36
#define msg_takes_back_stolen 37

#define msg_return_and_takes 38
#define msg_from_item 39
#define msg_gives_valuables_his 40
#define msg_gives_valuables_her 41
#define msg_gives_rumors_spread 42
#define msg_gives_stop_flee random(43,46)
#define msg_gives_stop_flee_questing random(47,50)
#define msg_stolen_return random(55,58)
#define msg_stolen_return_weak random(51,54)
#define msg_stolen_zero random(59,62)

#define msg_pretends_see_nothing random(63,65)
#define msg_pretends_see_nothing_stolen random(63,68)
#define msg_pretends_see_nothing_planted random(69,72)

#define msg_you_were_hit_for 96
#define msg_you_were_critically_hit_for 97
#define msg_fail_to_steal 98
#define msg_fail_to_plant 99

#define msg_weak_flee random(240, 244)
#define msg_child_attack random(230, 234)
#define msg_child_flee random(241, 246)
#define msg_child_common random(250, 254)
#define msg_child_rare random(260, 266)
#define msg_child_name_calling random(290, 294)
#define msg_pls_dont_kill random(270, 277)
#define msg_supmut_neutral random(300, 304)
#define msg_supmut_aggressive random(310, 314)
#define msg_supmut_threat random(320, 324)
#define msg_supmut_attack random(330, 334)
#define msg_supmut_flee random(340, 344)
#define msg_supmut_non_combat_attack random(380, 386)
#define msg_robot_normal random(1000, 1004)
#define msg_robot_aggressive random(1010, 1014)
#define msg_robot_threat random(1020, 1024)
#define msg_robot_attack random(1030, 1034)
#define msg_robot_flee random(1040, 1044)
#define msg_tough_human_threat random(120, 124)
#define msg_tough_human_attack random(130, 137)
#define msg_tough_human_flee random(140, 144)
#define msg_tough_human_non_combat_attack random(180, 186)
#define msg_tough_human_name_calling random(190, 195)
#define msg_unaiming_normal random(150, 154)
#define msg_aiming random(160, 164)
#define msg_unaiming_threat random(170, 174)

#define modmsg(x) (message_str_game(new_steal_msg, x))
#define is_sentient(obj) (get_proto_data(obj_pid(obj), PROTO_CR_BODY_TYPE) == CR_BODY_BIPED andAlso get_critter_stat(obj,STAT_iq) > 3 )
#define NO_STEAL(obj)    (get_proto_data(obj_pid(obj), PROTO_CR_FLAGS) bwand CFLG_NOSTEAL)
#define pe_div 2.5
#define min_chance_for_success 50
#define get_unique_id(obj) (get_object_data(obj, OBJ_DATA_ID))
#define clear_pickpocket_targets_array_time (ONE_GAME_HOUR * random(20,40))
#define town_failed_stealing_penalty_dec_time (random(5,7))
#define town_failed_stealing_penalty_dec_per_one_time (random(1,2))
#define value_irritation 1
#define value_caught_stealing 4
#define arr_shift_ptr 0
#define arr_shift_id 1
#define arr_shift_fixed_num 2
#define arr_shift_fixed_time 3
#define arr_shift_tile 4
#define arr_shift_rot 5
#define arr_shift_script 6
#define arr_shift_LVARS 7
#define arr_shift_8 8
#define arr_shift_max 9
#define lvar_max 50
#define arr_lpt_shift_id 0
#define arr_lpt_shift_time 1
#define arr_lpt_shift_count 2
#define arr_lpt_shift_3 3
#define arr_lpt_shift_4 4
#define arr_lpt_shift_max 5
#define fixed_param_steal 225


#include "sfall.h"
#include "DEFINE.H"
#include "define_extra.h"
#include "lib.strings.h"
#include "COMMAND.H"
#include "animcomd.h"

variable Sonora;
variable Nevada;
variable Et_tu;
variable Resurrection;

//variable pickpocket_count;
variable last_pickpocket_target;
variable last_pickpocket_targets_array;

variable dropped_items_pids_array;
variable steal_count;
variable right_hand_item;
variable right_hand_item_pid;
//variable right_hand_item_tmp;
variable right_hand_item_copy;
variable left_hand_item;
variable left_hand_item_pid;
//variable left_hand_item_tmp;
variable left_hand_item_copy;
variable right_hand_item_target;
variable stealing_from_hands = -1;
variable right_hand_stolen = -1;
variable left_hand_stolen = -1;
variable steal_item_num;
variable StealRebalance;
variable MinStealReq;
variable new_steal_msg;
variable SneakRework;
variable MinWpnStealReq;
variable ECCO_steal_mod;
variable sfall_ver_maj;
variable party_remove_ptr;

variable anim_tar_obj;
variable anim_tar_kill_type;
variable anim_tar_rot_tile;
variable anim_tar_rot;
variable anim_tar_tile;
variable anim_tar_gender;
variable anim_tar_melee_dmg;
variable anim_tar_unarmed_skill;
variable anim_tar_fire_arm;
variable anim_tar_weapon;
variable anim_tar_weapon_anim;
variable anim_tar_script;
variable anim_tar_lvars_arr;
variable dude_wpn;
variable dude_unwield;
variable caught_stealing_buy_penalty = 1;
variable caught_stealing_sell_penalty = 1;
variable town_sell_price_penalty_req = 1;
variable town_sell_price_penalty_mult = 0.05;
//variable town_buy_price_penalty_req = 3;
variable town_buy_price_penalty_mult = 0.05;
variable stolen_items_ptr_arr;
variable stolen_items_quantity_arr;
variable planted_items_ptr_arr;
variable planted_items_quantity_arr;
variable player_gender;
variable timed_event_targets_array;
variable timed_event_targets_lvar_array;
variable set_tar_flee;

variable dude_lu;
variable dude_was_robbed;
variable target_returns_goods;
variable timer_added_time;
variable timer_removed;
variable targets_prep_attack;
variable targets_prep_attack_attacking;
variable tile_to_pickup;
variable color_print;
variable dude_will_die;
variable attack_delay;
variable show_steal_chance;
variable steal_chance_win;
variable stolen_item;
variable dude_inv_offset_last = -2;
variable loot_obj_inv_offset_last = -2;
variable slot_num_under_mouse_last = -1;
variable dude_is_in_anim;
variable show_skill_req;
variable overlay_id;

variable mouse_add;
variable mouse_add_last;

variable ExpandInventory;
variable last_dude_inv_offset;
variable last_loot_obj_inv_offset;
variable last_dude_inv_count;
variable last_loot_obj_inv_count;

procedure start;
procedure STEAL_HOOK;
procedure steal_handler_ecco;
procedure USESKILL_HOOK;
procedure GAMEMODECHANGE_HOOK;
procedure REMOVEINVENOBJ_HOOK;
procedure BARTERPRICE_HOOK;
procedure STDPROCEDURE_HOOK;
procedure USEOBJON_HOOK;
procedure COMBATTURN_HOOK;
procedure MOUSECLICK_HOOK;
//procedure KEYPRESS_HOOK;
procedure map_exit_p_proc;
procedure update_penalty_value(variable town_id);
procedure attack_the_dude(variable target);
procedure clear_array_last_pickpocket_targets();
procedure add_script_restore_lvars(variable target,variable script);
procedure real_rotation_to_tile(variable begin_tile, variable dest_tile);
procedure show_steal_sfall_4();
procedure show_steal_sfall_5();
procedure show_steal_sfall_5_ExpandInventory();
procedure clear_gvars();


procedure start begin
   variable critter_ptr;
   variable critter_id;
   variable critter_script_id;
   variable arr_key;
   if game_loaded then begin
      StealRebalance = get_ini_setting("mods\\F2MechanicsMiniRework.ini|Main|StealRebalance");
      if StealRebalance > 0 then begin
         if StealRebalance > 0 then StealRebalance = 2;
         MinStealReq = get_ini_setting("mods\\F2MechanicsMiniRework.ini|Steal|MinStealReq");
         MinWpnStealReq = get_ini_setting("mods\\F2MechanicsMiniRework.ini|Steal|MinWpnStealReq");
         Nevada = get_ini_setting ("mods\\F2MechanicsMiniRework.ini|Main|Nevada");
         Sonora = get_ini_setting ("mods\\F2MechanicsMiniRework.ini|Main|Sonora");
         Resurrection = get_ini_setting ("mods\\F2MechanicsMiniRework.ini|Main|Resurrection");
         ET_TU = get_ini_setting ("mods\\F2MechanicsMiniRework.ini|Main|et_tu");
         //if get_ini_setting("mods\\ecco\\misc.ini|STEAL|exp_mult") or get_ini_setting("mods\\ecco\\misc.ini|STEAL|chance_steal_count_mod_mult") or get_ini_setting("mods\\ecco\\misc.ini|STEAL|chance_facing_mod") then begin
            ECCO_steal_mod = get_ini_setting("mods\\F2MechanicsMiniRework.ini|Main|FO2_ECCO");
         sfall_ver_maj = sfall_ver_major;
		 if sfall_ver_maj >= 5 andAlso (sfall_ver_build + sfall_ver_minor) >= 6 then ExpandInventory = get_ini_setting("ddraw.ini|Interface|ExpandInventory");
         //end
         if ECCO_steal_mod <= 0 then begin
            register_hook_proc_spec(HOOK_STEAL, STEAL_HOOK);
         end
         else begin
            register_hook_proc_spec(HOOK_STEAL, steal_handler_ecco);
         end
         register_hook_proc(HOOK_GAMEMODECHANGE, GAMEMODECHANGE_HOOK);
         register_hook_proc_spec(HOOK_USESKILL, USESKILL_HOOK);
         register_hook_proc_spec(HOOK_REMOVEINVENOBJ, REMOVEINVENOBJ_HOOK);
         register_hook_proc_spec(HOOK_BARTERPRICE, BARTERPRICE_HOOK);
         register_hook_proc_spec(HOOK_STDPROCEDURE, STDPROCEDURE_HOOK);
         register_hook_proc_spec(HOOK_USEOBJON, USEOBJON_HOOK);
         register_hook_proc_spec(HOOK_COMBATTURN, COMBATTURN_HOOK);
         register_hook_proc_spec(HOOK_MOUSECLICK, MOUSECLICK_HOOK);
         //register_hook_proc_spec(HOOK_KEYPRESS, KEYPRESS_HOOK);
         player_gender = get_critter_stat(real_dude_obj,STAT_gender);
         new_steal_msg = add_extra_msg_file(msg_file);
         SneakRework = get_ini_setting("mods\\F2MechanicsMiniRework.ini|Main|SneakRework");
         last_pickpocket_targets_array = load_array("last_pickpocket_targets_array");
         timed_event_targets_array = load_array("timed_event_targets_array");
         timed_event_targets_lvar_array = load_array("timed_event_targets_lvar_array");
         if timed_event_targets_lvar_array <= 0 then begin
            timed_event_targets_lvar_array = create_array_map;
            save_array("timed_event_targets_lvar_array", timed_event_targets_lvar_array);
         end
         if len_array(timed_event_targets_array) > 0 then begin
            foreach critter_ptr in list_as_array(LIST_CRITTERS) begin
               critter_id = get_unique_id(critter_ptr);
               if is_in_array(critter_id, timed_event_targets_array) then begin
                  arr_key = scan_array(timed_event_targets_array, critter_id) - arr_shift_id;
                  set_array(timed_event_targets_array, arr_key, critter_ptr);
                  if get_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num)) == 1 then begin
                     targets_prep_attack += 1;
                  end
                  if is_in_array(critter_id , timed_event_targets_lvar_array) then begin
                     critter_script_id = (get_array(timed_event_targets_array, (arr_key + arr_shift_script)));
                     call add_script_restore_lvars(critter_ptr, critter_script_id);
                  end
               end
            end
            add_global_timer_event(game_ticks(5),fixed_param_steal);
         end
         call update_penalty_value(cur_town);
         call clear_array_last_pickpocket_targets();
      end
      dude_lu = dude_luck;
      set_global_script_type(3);
      set_global_script_repeat(0);

   end
   else begin
      if steal_chance_win > 0 then begin
         if sfall_ver_maj >= 5 then begin
            if ExpandInventory >= 2 then begin
               call show_steal_sfall_5_ExpandInventory();
            end
            else begin
               call show_steal_sfall_5();
            end
         end
         else begin
            call show_steal_sfall_4();
         end
      end
   end
end

procedure COMBATTURN_HOOK begin
   if set_tar_flee > 0 then begin
      critter_set_flee_state(set_tar_flee, 1);
      set_tar_flee = 0;
   end
end


procedure get_item_penalty(variable thief, variable target, variable item, variable stype, variable quantity) begin
   variable item_pid = obj_pid(item);
   variable item_cost;
   variable item_size;
   variable item_weight_lvar;
   variable item_penalty;
   variable pickpocket = has_trait(TRAIT_PERK, thief, PERK_pickpocket);
   // PERK_pickpocket check for add|remove item size, cost and weight penalty
   if pickpocket < 1 then begin
      item_size = get_proto_data(item_pid, PROTO_IT_SIZE);
      item_weight_lvar = item_weight(item);
      item_cost = get_proto_data(item_pid, PROTO_IT_COST);
      if item_size <= 0 andAlso item_weight_lvar <= 0 then begin
         item_size = item_cost * 0.02;
         if item_cost > 4000 then item_cost = 4000;
         if stype == 1 then begin
            item_cost = 0;
         end
         item_penalty = (item_size);
      end
      else begin
         if item_cost > 4000 then item_cost = 4000;
         if stype == 1 then begin
            item_cost = 0;
         end
         item_penalty = ((item_size + 1) + (item_weight_lvar + 1) + (item_cost / 75.0)) * 3;
      end
   end
   else begin
      item_penalty = 0.0001;
   end
   if item_penalty <= 0 then item_penalty = 0.0001;
   return item_penalty;
end


procedure get_chance_to_steal_without_item(variable thief, variable target, variable item, variable stype, variable quantity) begin
   variable user_steal_skill = has_skill(thief, SKILL_STEAL);
   variable user_sneak_skill = has_skill(thief, SKILL_SNEAK);
   variable target_barter_skill = has_skill(target, SKILL_BARTER);
   variable skill_bonus;
   variable user_steal_skill_mult = 1.50;
   variable target_pe = get_critter_stat(target, STAT_pe);
   variable target_pe_mult = 0;
   variable chance_to_steal_without_item = 0;
   variable steal_bonus = 0;
   variable pickpocket = has_trait(TRAIT_PERK, thief, PERK_pickpocket);
   variable night_vision = has_trait(TRAIT_PERK, thief, PERK_night_vision );
   variable light_level = get_light_level;
   variable target_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
   variable target_rot_to_tar = rotation_to_tile(tile_num(target), tile_num(thief));
   variable ally_rot = -6;
   variable ally_rot_to_tar = - 6;
   variable team = has_trait(TRAIT_OBJECT, target, OBJECT_TEAM_NUM);
   variable ally = 0;
   variable ally_team = -1;
   variable ally_pe = 0;
   variable sneak_bonus = 0;
   variable user_state = critter_state(thief);
   variable taget_state = critter_state(target);
   variable distance;
   variable ally_state = -1;
   variable ally_cur_frm = -1;
   variable darkness_penalty;
   variable target_kill_type;
   variable item_total_penalty;
   variable chance_to_steal;
   variable min_skill_needed;
   variable hand_item_stealing;
   if target > 0 then target_kill_type = critter_kill_type(target);
   // Stealing weapons from hand.
   if (item == right_hand_item_copy or item == left_hand_item_copy) andAlso stype == 0 then begin
      right_hand_item_target = target;
      hand_item_stealing = 1;
   end
   // SKILL_SCIENCE and SKILL_REPAIR bonus for stealing from robots
   if target_kill_type == KILL_TYPE_robot_kills then begin
      skill_bonus = (has_skill(thief, SKILL_REPAIR) / 3) + (has_skill(thief, SKILL_SCIENCE) / 2);
      user_steal_skill = user_steal_skill + skill_bonus;
      user_sneak_skill = user_sneak_skill + skill_bonus;
   end
   // 15-29% penalty to target pe if light lower 50%(or 70% if has night_vision)
   if light_level < 41216 + (night_vision * 21504) andAlso target_kill_type != KILL_TYPE_alien_kills andAlso target_kill_type != KILL_TYPE_robot_kills andAlso target_kill_type != KILL_TYPE_floater_kills then begin
      darkness_penalty = (light_level - (night_vision * 14336)) / 6000.0;
      target_pe_mult = -(7 / (darkness_penalty - 1)) / 1.00; // -2 if 0 light, -0,4 if 50% light
   end

   target_pe_mult = target_pe_mult + 5;
   // PERK_pickpocket check for add|remove item size, cost and weight penalty


   // stealing penalty if target's allies can see the thief
   if StealRebalance == 2 then begin
      foreach ally in list_as_array(LIST_CRITTERS) begin
            ally_rot = -6;
            ally_rot_to_tar = -6;
         if ally != dude_obj andAlso ally != target andAlso is_sentient(ally) then begin
               ally_rot = has_trait(TRAIT_OBJECT, ally, OBJECT_CUR_ROT);
               ally_rot_to_tar = real_rotation_to_tile(tile_num(ally), tile_num(dude_obj));
               ally_team := has_trait(TRAIT_OBJECT, ally, OBJECT_TEAM_NUM);
               distance_objs(distance, ally, dude_obj);
               ally_pe = get_critter_stat(ally, STAT_pe);
               ally_state = critter_state(ally);
               ally_cur_frm = get_object_data(ally, OBJ_DATA_CUR_FRM);
               if ally_pe >= 3 andAlso ( (ally_cur_frm == 0) or (crit_is_moving(ally)) ) andAlso not(ally_state bwand (DAM_KNOCKED_OUT bwor DAM_KNOCKED_DOWN bwor DAM_BLIND)) andAlso ally_team == team andAlso (ally_rot == ally_rot_to_tar or ((ally_rot == (ally_rot_to_tar + 1)%6  or ally_rot == (ally_rot_to_tar + 5)%6) andAlso distance <= ally_pe*target_pe_mult/pe_div)) then begin
                  if obj_can_see_obj(ally, dude_obj) then begin
                  target_pe = target_pe + ally_pe - 1;
               end
            end
         end
      end
   end
      // stealing penalty if target facing the thief
   if target_rot == target_rot_to_tar  then begin
      if pickpocket < 1 then begin
         steal_bonus = steal_bonus - 30;
      end
   end
      // Penalty for theft if the target is sideways to the thief
   if target_rot == (target_rot_to_tar + 1) % 6 or target_rot == (target_rot_to_tar + 5) % 6 then begin
      if pickpocket < 1 then begin
         steal_bonus = steal_bonus - 25;
      end
   end
      // bonus if thief right behind target
   if target_rot == (target_rot_to_tar + 3) % 6 then begin
      steal_bonus = steal_bonus + 5;
   end
      // bonus if target is prone or blind
   if (taget_state BWAND DAM_BLIND) or (taget_state bwand CRITTER_IS_PRONE) then begin
      steal_bonus = steal_bonus + 15;
   end
      // bonus if target is ko
   if (taget_state BWAND DAM_KNOCKED_DOWN) or (taget_state BWAND DAM_KNOCKED_OUT) then begin
      steal_bonus = steal_bonus + 25;
   end
      //steal_bonus if target can't see thief
   if not(obj_can_see_obj(target, dude_obj)) then begin
      steal_bonus = steal_bonus + 20;
   end
      // bonus for sneak_success even if target can see thief
   if using_skill(dude_obj, SKILL_SNEAK) then begin
      sneak_bonus = user_sneak_skill / 6.0;
   end
   //if sneak_bonus > user_steal_skill / 2 then begin
      //sneak_bonus = user_steal_skill / 2;
   //end
   steal_bonus = steal_bonus + sneak_bonus;

      //it harder to steal from merchants
   if target_barter_skill >= 50 then begin
      steal_bonus = steal_bonus - (target_barter_skill / 3);
   end
      //crippled arms = harder to pickpocket
   if (user_state BWAND DAM_CRIP_ARM_RIGHT) andAlso (user_state BWAND DAM_CRIP_ARM_LEFT) then begin
      steal_bonus =  steal_bonus - 80;
   end
      //chance_to_steal formula
   target_pe_mult = target_pe_mult + 3;
   if user_steal_skill == 0 then user_steal_skill = 1;
   if hand_item_stealing > 0 then begin
      if pickpocket < 1 then begin
         hand_item_stealing = MinWpnStealReq/3 + (get_proto_data(obj_pid(item), PROTO_IT_SIZE)) + (item_weight(item));
      end
      else begin
         hand_item_stealing = MinWpnStealReq/3;
      end
   end

   chance_to_steal_without_item = 50 + 15 * stype + steal_bonus + (user_steal_skill_mult * user_steal_skill) - hand_item_stealing - steal_count - (target_pe * target_pe_mult);
   //if chance_to_steal_without_item > 0 then begin
      item_total_penalty = get_item_penalty(thief, target, item, stype, quantity) * quantity;
   //end
   if floor(chance_to_steal_without_item + steal_count - item_total_penalty) < min_chance_for_success then begin

      //if StealRebalance == 2 andAlso steal_count == 0 then begin
         min_skill_needed = ceil((min_chance_for_success - (50 + 15 * stype + steal_bonus - hand_item_stealing - item_total_penalty - (target_pe * target_pe_mult))) / user_steal_skill_mult) ;
         return (min_skill_needed + 50000);
      //end
   end
   else begin
      return chance_to_steal_without_item;
   end
end

procedure get_chance_to_steal_min_item_count(variable thief, variable target, variable item, variable stype, variable quantity) begin
   variable user_steal_skill = has_skill(thief, SKILL_STEAL);
   variable user_sneak_skill = has_skill(thief, SKILL_SNEAK);
   variable target_barter_skill = has_skill(target, SKILL_BARTER);
   variable skill_bonus;
   variable user_steal_skill_mult = 1.50;
   variable target_pe = get_critter_stat(target, STAT_pe);
   variable target_pe_mult = 0;
   variable chance_to_steal_min_item_count = 0;
   variable steal_bonus = 0;
   variable pickpocket = has_trait(TRAIT_PERK, thief, PERK_pickpocket);
   variable night_vision = has_trait(TRAIT_PERK, thief, PERK_night_vision );
   variable light_level = get_light_level;
   variable target_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
   variable target_rot_to_tar = rotation_to_tile(tile_num(target), tile_num(thief));
   variable ally_rot = -6;
   variable ally_rot_to_tar = - 6;
   variable team = has_trait(TRAIT_OBJECT, target, OBJECT_TEAM_NUM);
   variable ally = 0;
   variable ally_team = -1;
   variable ally_pe = 0;
   variable sneak_bonus = 0;
   variable user_state = critter_state(thief);
   variable taget_state = critter_state(target);
   variable distance;
   variable ally_state = -1;
   variable ally_cur_frm = -1;
   variable darkness_penalty;
   variable item_total_penalty;
   variable chance_to_steal;
   variable max_item_count;
   variable item_penalty;
   variable steal_chance;
   variable max_steal_chance;
   variable target_kill_type;
   if target > 0 then target_kill_type = critter_kill_type(target);
      // SKILL_SCIENCE and SKILL_REPAIR bonus for stealing from robots
      if target_kill_type == KILL_TYPE_robot_kills then begin
         skill_bonus = (has_skill(thief, SKILL_REPAIR) / 3) + (has_skill(thief, SKILL_SCIENCE) / 2);
         user_steal_skill = user_steal_skill + skill_bonus;
         user_sneak_skill = user_sneak_skill + skill_bonus;
      end
      // 15-29% penalty to target pe if light lower 50%(or 70% if has night_vision)
      if light_level < 41216 + (night_vision * 21504) andAlso target_kill_type != KILL_TYPE_alien_kills andAlso target_kill_type != KILL_TYPE_robot_kills andAlso target_kill_type != KILL_TYPE_floater_kills then begin
         darkness_penalty = (light_level - (night_vision * 14336)) / 6000.0;
         target_pe_mult = -(7 / (darkness_penalty - 1)) / 1.00; // -2 if 0 light, -0,4 if 50% light
      end

      target_pe_mult = target_pe_mult + 5;
      // PERK_pickpocket check for add|remove item size, cost and weight penalty


      // stealing penalty if target's allies can see the thief
      if StealRebalance == 2 then begin
         foreach ally in list_as_array(LIST_CRITTERS) begin
               ally_rot = -6;
               ally_rot_to_tar = -6;
            if ally != dude_obj andAlso ally != target andAlso is_sentient(ally) then begin
                  ally_rot = has_trait(TRAIT_OBJECT, ally, OBJECT_CUR_ROT);
                  ally_rot_to_tar = real_rotation_to_tile(tile_num(ally), tile_num(dude_obj));
                  ally_team := has_trait(TRAIT_OBJECT, ally, OBJECT_TEAM_NUM);
                  distance_objs(distance, ally, dude_obj);
                  ally_pe = get_critter_stat(ally, STAT_pe);
                  ally_state = critter_state(ally);
                  ally_cur_frm = get_object_data(ally, OBJ_DATA_CUR_FRM);
                  if ally_pe >= 3 andAlso ( (ally_cur_frm == 0) or (crit_is_moving(ally)) ) andAlso not(ally_state bwand (DAM_KNOCKED_OUT bwor DAM_KNOCKED_DOWN bwor DAM_BLIND)) andAlso ally_team == team andAlso (ally_rot == ally_rot_to_tar or ((ally_rot == (ally_rot_to_tar + 1)%6  or ally_rot == (ally_rot_to_tar + 5)%6) andAlso distance <= ally_pe*target_pe_mult/pe_div)) then begin
                     if obj_can_see_obj(ally, dude_obj) then begin
                     target_pe = target_pe + ally_pe - 1;
                  end
               end
            end
         end
      end
         // stealing penalty if target facing the thief
      if target_rot == target_rot_to_tar  then begin
         if pickpocket < 1 then begin
            steal_bonus = steal_bonus - 30;
         end
      end
         // Penalty for theft if the target is sideways to the thief
      if target_rot == (target_rot_to_tar + 1) % 6 or target_rot == (target_rot_to_tar + 5) % 6 then begin
         if pickpocket < 1 then begin
            steal_bonus = steal_bonus - 25;
         end
      end
         // bonus if thief right behind target
      if target_rot == (target_rot_to_tar + 3) % 6 then begin
         steal_bonus = steal_bonus + 5;
      end
         // bonus if target is prone or blind
      if (taget_state BWAND DAM_BLIND) or (taget_state bwand CRITTER_IS_PRONE) then begin
         steal_bonus = steal_bonus + 15;
      end
         // bonus if target is ko
      if (taget_state BWAND DAM_KNOCKED_DOWN) or (taget_state BWAND DAM_KNOCKED_OUT) then begin
         steal_bonus = steal_bonus + 25;
      end
         //steal_bonus if target can't see thief
      if not(obj_can_see_obj(target, dude_obj)) then begin
         steal_bonus = steal_bonus + 20;
      end
         // bonus for sneak_success even if target can see thief
      if  using_skill(dude_obj, SKILL_SNEAK) then begin
         sneak_bonus = user_sneak_skill / 6.0;
      end
      //if sneak_bonus > user_steal_skill / 2 then begin
         //sneak_bonus = user_steal_skill / 2;
      //end
      steal_bonus = steal_bonus + sneak_bonus;

         //it harder to steal from merchants
      if target_barter_skill >= 50 then begin
         steal_bonus = steal_bonus - (target_barter_skill / 3);
      end
         //crippled arms = harder to pickpocket
      if (user_state BWAND DAM_CRIP_ARM_RIGHT) andAlso (user_state BWAND DAM_CRIP_ARM_LEFT) then begin
         steal_bonus =  steal_bonus - 80;
      end
         //chance_to_steal formula
      target_pe_mult = target_pe_mult + 3;
      if user_steal_skill == 0 then user_steal_skill = 1;

      chance_to_steal_min_item_count = 50 + 15 * stype + steal_bonus + (user_steal_skill_mult * user_steal_skill) - steal_count - (target_pe * target_pe_mult);


   if chance_to_steal_min_item_count > 0 then begin
      item_penalty = get_item_penalty(thief, target, item, stype, quantity);
      item_total_penalty = item_penalty * quantity;
   end
   else begin
      return 10000;
   end
   max_steal_chance = (has_skill(thief, SKILL_STEAL) - 130) / 10;
   if max_steal_chance < 0 then begin
      max_steal_chance = 0;
   end
   max_steal_chance += dude_lu / 10;
   if max_steal_chance > 4 then begin
      max_steal_chance = 4;
   end
   steal_chance = floor(chance_to_steal_min_item_count - item_total_penalty);
   if steal_chance >= min_chance_for_success then steal_chance += dude_lu;
   if steal_chance < 95 + max_steal_chance then begin
      max_item_count = chance_to_steal_min_item_count + dude_lu - 95;
      max_item_count = max_item_count / item_penalty;
      max_item_count = floor(max_item_count);
      if max_item_count > quantity then max_item_count = quantity;
      if max_item_count > 0 then begin
         return (max_item_count * 10000) + 95 + max_steal_chance;
      end
      else begin
         max_item_count = 1 * ceil(1 / item_penalty);
         if max_item_count > quantity then max_item_count = quantity;
         steal_chance = floor(chance_to_steal_min_item_count - item_penalty);
         if steal_chance < 0 then steal_chance = 0;
         if steal_chance >= min_chance_for_success - steal_count andAlso steal_chance > 0 then begin
            steal_chance += dude_lu;
            if steal_chance > 95 + max_steal_chance then steal_chance = 95 + max_steal_chance;
            return ((max_item_count * 10000) + (steal_chance));
         end
         else begin
            return 10000;
         end
      end
   end
   else begin
      return (quantity * 10000) + 95 + max_steal_chance;
   end
end

procedure get_chance_to_steal(variable thief, variable target, variable item, variable stype, variable quantity) begin
   variable max_steal_chance;
   variable item_total_penalty=(get_item_penalty(thief, target, item, stype, quantity)*quantity);
   variable chance_to_steal = floor(get_chance_to_steal_without_item(thief, target, item, stype, quantity) - item_total_penalty);

   if chance_to_steal < 0 then return 0;
   if chance_to_steal > 25000 then return 0;
   max_steal_chance = (has_skill(thief, SKILL_STEAL) - 130) / 10;
   if max_steal_chance < 0 then begin
      max_steal_chance = 0;
   end
   max_steal_chance += dude_lu / 10;
   if max_steal_chance > 4 then begin
      max_steal_chance = 4;
   end
   if chance_to_steal + steal_count >= min_chance_for_success then chance_to_steal += dude_lu;


   if chance_to_steal > 95 + max_steal_chance then begin
      chance_to_steal = 95 + max_steal_chance;
   end
   return chance_to_steal;
end

inline procedure show_steal_sfall_4 begin
   variable obj_loot;
   variable loot_obj_inv_offset = read_int(0x59E7EC);
   variable loot_obj_inv_count;
   variable dude_inv_offset = read_int(0x59E844);
   variable dude_inv_count;
   variable item;
   variable item_count;
   variable orig_item_count;
   variable item_inv_num;
   variable slot_num;
   variable slot_num_under_mouse = read_int(0x59E93C);
   variable inven_max_slots;
   variable i;
   variable refresh;
   variable new_x;
   variable j;
   variable steal_chance;
   variable steal_chance_without_item;
   variable item_total_penalty;
   variable orig_steal_chance;
   variable orig_steal_chance_1_item;
   if steal_chance_win > 0 then begin
      if (loot_obj_inv_offset != loot_obj_inv_offset_last) orElse (dude_inv_offset != dude_inv_offset_last) orElse (slot_num_under_mouse != slot_num_under_mouse_last) orElse mouse_add != mouse_add_last then begin
         if (loot_obj_inv_offset != loot_obj_inv_offset_last) orElse (dude_inv_offset != dude_inv_offset_last) orElse (slot_num_under_mouse != slot_num_under_mouse_last) then begin
            mouse_add = 0;
         end
         mouse_add_last = mouse_add;
         loot_obj_inv_offset_last = loot_obj_inv_offset;
         dude_inv_offset_last = dude_inv_offset;
         slot_num_under_mouse_last = slot_num_under_mouse;
         sfall_func2("interface_overlay", WINTYPE_INVENTORY, 0);
         sfall_func2("interface_overlay", WINTYPE_INVENTORY, 1);
         inven_max_slots = read_int(0x519054);
         SetFont(0);
         if slot_num_under_mouse >= 2000 andAlso slot_num_under_mouse < (2000 + inven_max_slots) then begin
            obj_loot = loot_obj;
            loot_obj_inv_count = inven_count(obj_loot) - loot_obj_inv_offset;
            slot_num = slot_num_under_mouse % 2000;
            if slot_num > (loot_obj_inv_count-1) then begin

            end
            else begin
               item_inv_num = (loot_obj_inv_count - 1) - slot_num;
               item = inven_ptr(obj_loot, item_inv_num);
               item_count = obj_is_carrying_obj(obj_loot, item);
               orig_item_count = item_count;
               if orig_item_count > 1 then begin
                  steal_chance = get_chance_to_steal_min_item_count(dude_obj, obj_loot, item, 0, orig_item_count);
                  item_count = steal_chance / 10000;
                  steal_chance = steal_chance % 10000;
                  orig_steal_chance = steal_chance;
                  if steal_chance > 0 andAlso mouse_add > 0 then begin
                     if obj_pid(item) == PID_BOTTLE_CAPS then begin
                        item_count += mouse_add * 100;
                        if item_count > orig_item_count then begin
                           mouse_add = -1;
                           item_count = orig_item_count;
                           mouse_add_last = mouse_add;
                        end
                     end
                     else begin
                        item_count += mouse_add;
                        if item_count > orig_item_count then begin
                           mouse_add = 0;
                           item_count = orig_item_count;
                        end
                     end
                     steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 0, item_count);
                     if steal_chance <= 0 then begin
                        mouse_add = -1;
                        mouse_add_last = mouse_add;
                     end
                  end
               end
               else begin
                  steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 0, item_count);
                  orig_steal_chance = steal_chance;
               end
               if steal_chance <= 9 then begin
                  if steal_chance < 0 then steal_chance = 0;
                  if orig_item_count > 1 then begin
                     if item_count <= 1 andAlso steal_chance <= 0 then begin
                        interface_print("0%", WINTYPE_INVENTORY, 346, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                     end
                     else begin
                        for ( i = 1; i <= item_count; i *= 10) begin
                           new_x += 7;
                        end
                        interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 337-new_x, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                     end
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 344, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
                  if item_count <= 1 andAlso orig_steal_chance <= 0 andAlso show_skill_req > 0 then begin
                     steal_chance = get_chance_to_steal_without_item(dude_obj, obj_loot, item, 0, item_count) - 50000;
                     if steal_chance > 0 then begin
                        display_msg(parse_str_2(modmsg(94), steal_chance, obj_name(item)));
                     end
                  end
               end
               else begin
                  if orig_item_count > 1 then begin
                     for ( i = 1; i <= item_count; i *= 10) begin
                        new_x += 7;
                     end
                     interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 329-new_x, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 335, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
               end

            end
         end
         else if slot_num_under_mouse >= 1000 andAlso slot_num_under_mouse < (1000 + inven_max_slots) then begin
            obj_loot = loot_obj;
            dude_inv_count = inven_count(dude_obj) - dude_inv_offset;
            slot_num = slot_num_under_mouse % 1000;
            if slot_num > dude_inv_count-1 then begin

            end
            else begin
               item_inv_num = (dude_inv_count - 1) - slot_num;
               item = inven_ptr(dude_obj, item_inv_num);
               item_count = obj_is_carrying_obj(dude_obj, item);
               orig_item_count = item_count;
              if orig_item_count > 1 then begin
                  steal_chance = get_chance_to_steal_min_item_count(dude_obj, obj_loot, item, 1, orig_item_count);
                  item_count = steal_chance / 10000;
                  steal_chance = steal_chance % 10000;
                  orig_steal_chance = steal_chance;
                  if steal_chance > 0 andAlso mouse_add > 0 then begin
                     if obj_pid(item) == PID_BOTTLE_CAPS then begin
                        item_count += mouse_add * 100;
                        if item_count > orig_item_count then begin
                           mouse_add = -1;
                           item_count = orig_item_count;
                           mouse_add_last = mouse_add;
                        end
                     end
                     else begin
                        item_count += mouse_add;
                        if item_count > orig_item_count then begin
                           mouse_add = 0;
                           item_count = orig_item_count;
                        end
                     end
                     steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 1, item_count);
                     if steal_chance <= 0 then begin
                        mouse_add = -1;
                        mouse_add_last = mouse_add;
                     end
                  end
               end
               else begin
                  steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 1, item_count);
                  orig_steal_chance = steal_chance;
               end
               if steal_chance <= 9 then begin
                  if orig_item_count > 1 then begin
                     if item_count <= 1 andAlso steal_chance <= 0 then begin
                        interface_print("0%", WINTYPE_INVENTORY, 224, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                     end
                     else begin
                        for ( i = 1; i <= item_count; i *= 10) begin
                           new_x += 7;
                        end
                        interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 218-new_x, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                     end
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 225, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
                  if item_count <= 1 andAlso orig_steal_chance <= 0 andAlso show_skill_req > 0 then begin
                     steal_chance = get_chance_to_steal_without_item(dude_obj, obj_loot, item, 1, item_count) - 50000;
                     if steal_chance > 0 then begin
                        display_msg(parse_str_2(modmsg(95), steal_chance, obj_name(item)));
                     end
                  end
               end

               else begin
                  if orig_item_count > 1 then begin
                     for ( i = 1; i <= item_count; i *= 10) begin
                        new_x += 7;
                     end
                     interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 210-new_x, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 217, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
               end
            end
         end
         show_skill_req = 0;
      end
   end
end

inline procedure show_steal_sfall_5 begin
   variable obj_loot;
   variable loot_obj_inv_offset = read_int(0x59E7EC);
   variable loot_obj_inv_count;
   variable dude_inv_offset = read_int(0x59E844);
   variable dude_inv_count;
   variable item;
   variable item_count;
   variable orig_item_count;
   variable item_inv_num;
   variable slot_num;
   variable slot_num_under_mouse = read_int(0x59E93C);
   variable inven_max_slots;
   variable i;
   variable refresh;
   variable new_x;
   variable j;
   variable steal_chance;
   variable steal_chance_without_item;
   variable item_total_penalty;
   variable orig_steal_chance;
   variable orig_steal_chance_1_item;
   if steal_chance_win > 0 then begin
      if (loot_obj_inv_offset != loot_obj_inv_offset_last) orElse (dude_inv_offset != dude_inv_offset_last) orElse (slot_num_under_mouse != slot_num_under_mouse_last) orElse mouse_add != mouse_add_last then begin
         if (loot_obj_inv_offset != loot_obj_inv_offset_last) orElse (dude_inv_offset != dude_inv_offset_last) orElse (slot_num_under_mouse != slot_num_under_mouse_last) then begin
            mouse_add = 0;
         end
         mouse_add_last = mouse_add;
         loot_obj_inv_offset_last = loot_obj_inv_offset;
         dude_inv_offset_last = dude_inv_offset;
         slot_num_under_mouse_last = slot_num_under_mouse;
         sfall_func3("interface_overlay", WINTYPE_INVENTORY, 0,overlay_id);
         overlay_id = sfall_func2("interface_overlay", WINTYPE_INVENTORY, 1);
         sfall_func3("interface_overlay", WINTYPE_INVENTORY, 3,overlay_id);
         inven_max_slots = read_int(0x519054);
         SetFont(0);
         if slot_num_under_mouse >= 2000 andAlso slot_num_under_mouse < (2000 + inven_max_slots) then begin
            obj_loot = loot_obj;
            loot_obj_inv_count = inven_count(obj_loot) - loot_obj_inv_offset;
            slot_num = slot_num_under_mouse % 2000;
            if slot_num > (loot_obj_inv_count-1) then begin

            end
            else begin
               item_inv_num = (loot_obj_inv_count - 1) - slot_num;
               item = inven_ptr(obj_loot, item_inv_num);
               item_count = obj_is_carrying_obj(obj_loot, item);
               orig_item_count = item_count;
               if orig_item_count > 1 then begin
                  steal_chance = get_chance_to_steal_min_item_count(dude_obj, obj_loot, item, 0, orig_item_count);
                  item_count = steal_chance / 10000;
                  steal_chance = steal_chance % 10000;
                  orig_steal_chance = steal_chance;
                  if steal_chance > 0 andAlso mouse_add > 0 then begin
                     if obj_pid(item) == PID_BOTTLE_CAPS then begin
                        item_count += mouse_add * 100;
                        if item_count > orig_item_count then begin
                           mouse_add = -1;
                           item_count = orig_item_count;
                           mouse_add_last = mouse_add;
                        end
                     end
                     else begin
                        item_count += mouse_add;
                        if item_count > orig_item_count then begin
                           mouse_add = 0;
                           item_count = orig_item_count;
                        end
                     end
                     steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 0, item_count);
                     if steal_chance <= 0 then begin
                        mouse_add = -1;
                        mouse_add_last = mouse_add;
                     end
                  end
               end
               else begin
                  steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 0, item_count);
                  orig_steal_chance = steal_chance;
               end
               if steal_chance <= 9 then begin
                  if steal_chance < 0 then steal_chance = 0;
                  if orig_item_count > 1 then begin
                     if item_count <= 1 andAlso steal_chance <= 0 then begin
                        interface_print("0%", WINTYPE_INVENTORY, 346, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                     end
                     else begin
                        for ( i = 1; i <= item_count; i *= 10) begin
                           new_x += 7;
                        end
                        interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 337-new_x, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                     end
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 344, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
                  if item_count <= 1 andAlso orig_steal_chance <= 0 andAlso show_skill_req > 0 then begin
                     steal_chance = get_chance_to_steal_without_item(dude_obj, obj_loot, item, 0, item_count) - 50000;
                     if steal_chance > 0 then begin
                        display_msg(parse_str_2(modmsg(94), steal_chance, obj_name(item)));
                     end
                  end
               end
               else begin
                  if orig_item_count > 1 then begin
                     for ( i = 1; i <= item_count; i *= 10) begin
                        new_x += 7;
                     end
                     interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 329-new_x, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 335, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
               end

            end
         end
         else if slot_num_under_mouse >= 1000 andAlso slot_num_under_mouse < (1000 + inven_max_slots) then begin
            obj_loot = loot_obj;
            dude_inv_count = inven_count(dude_obj) - dude_inv_offset;
            slot_num = slot_num_under_mouse % 1000;
            if slot_num > dude_inv_count-1 then begin

            end
            else begin
               item_inv_num = (dude_inv_count - 1) - slot_num;
               item = inven_ptr(dude_obj, item_inv_num);
               item_count = obj_is_carrying_obj(dude_obj, item);
               orig_item_count = item_count;
              if orig_item_count > 1 then begin
                  steal_chance = get_chance_to_steal_min_item_count(dude_obj, obj_loot, item, 1, orig_item_count);
                  item_count = steal_chance / 10000;
                  steal_chance = steal_chance % 10000;
                  orig_steal_chance = steal_chance;
                  if steal_chance > 0 andAlso mouse_add > 0 then begin
                     if obj_pid(item) == PID_BOTTLE_CAPS then begin
                        item_count += mouse_add * 100;
                        if item_count > orig_item_count then begin
                           mouse_add = -1;
                           item_count = orig_item_count;
                           mouse_add_last = mouse_add;
                        end
                     end
                     else begin
                        item_count += mouse_add;
                        if item_count > orig_item_count then begin
                           mouse_add = 0;
                           item_count = orig_item_count;
                        end
                     end
                     steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 1, item_count);
                     if steal_chance <= 0 then begin
                        mouse_add = -1;
                        mouse_add_last = mouse_add;
                     end
                  end
               end
               else begin
                  steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 1, item_count);
                  orig_steal_chance = steal_chance;
               end
               if steal_chance <= 9 then begin
                  if orig_item_count > 1 then begin
                     if item_count <= 1 andAlso steal_chance <= 0 then begin
                        interface_print("0%", WINTYPE_INVENTORY, 224, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                     end
                     else begin
                        for ( i = 1; i <= item_count; i *= 10) begin
                           new_x += 7;
                        end
                        interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 218-new_x, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                     end
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 225, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
                  if item_count <= 1 andAlso orig_steal_chance <= 0 andAlso show_skill_req > 0 then begin
                     steal_chance = get_chance_to_steal_without_item(dude_obj, obj_loot, item, 1, item_count) - 50000;
                     if steal_chance > 0 then begin
                        display_msg(parse_str_2(modmsg(95), steal_chance, obj_name(item)));
                     end
                  end
               end

               else begin
                  if orig_item_count > 1 then begin
                     for ( i = 1; i <= item_count; i *= 10) begin
                        new_x += 7;
                     end
                     interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 210-new_x, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 217, (69 + (slot_num * 50)), (1 bwor 0x0010000));
                  end
               end
			end
         end
         sfall_func3("interface_overlay", WINTYPE_INVENTORY, 3,0);
         show_skill_req = 0;
      end
   end
end


inline procedure show_steal_sfall_5_ExpandInventory begin
   variable obj_loot;
   variable loot_obj_inv_offset = read_int(0x59E7EC);
   variable loot_obj_inv_count;
   variable dude_inv_offset = read_int(0x59E844);
   variable dude_inv_count;
   variable item;
   variable item_count;
   variable orig_item_count;
   variable item_inv_num;
   variable slot_num;
   variable slot_num_under_mouse = read_int(0x59E93C);
   variable inven_max_slots;
   variable i;
   variable refresh;
   variable new_x;
   variable j;
   variable qqq;
   variable steal_chance;
   variable steal_chance_without_item;
   variable item_total_penalty;
   variable orig_steal_chance;
   variable orig_steal_chance_1_item;
   variable left_side_last_slot_num;
   if steal_chance_win > 0 then begin
      last_loot_obj_inv_offset = loot_obj_inv_offset;
      last_dude_inv_offset = dude_inv_offset;
      if (loot_obj_inv_offset != loot_obj_inv_offset_last) orElse (dude_inv_offset != dude_inv_offset_last) orElse (slot_num_under_mouse != slot_num_under_mouse_last) orElse mouse_add != mouse_add_last then begin
         if (loot_obj_inv_offset != loot_obj_inv_offset_last) orElse (dude_inv_offset != dude_inv_offset_last) orElse (slot_num_under_mouse != slot_num_under_mouse_last) then begin
            mouse_add = 0;
         end
         mouse_add_last = mouse_add;
         loot_obj_inv_offset_last = loot_obj_inv_offset;
         dude_inv_offset_last = dude_inv_offset;
         slot_num_under_mouse_last = slot_num_under_mouse;
         sfall_func3("interface_overlay", WINTYPE_INVENTORY, 0,overlay_id);
         overlay_id = sfall_func2("interface_overlay", WINTYPE_INVENTORY, 1);
         sfall_func3("interface_overlay", WINTYPE_INVENTORY, 3,overlay_id);
         //inven_max_slots = read_int(0x519054);
         inven_max_slots = 12;
         SetFont(0);
         if slot_num_under_mouse >= 2000 andAlso slot_num_under_mouse < (2000 + inven_max_slots) then begin
            obj_loot = loot_obj;
            loot_obj_inv_count = inven_count(obj_loot) - loot_obj_inv_offset;
            last_loot_obj_inv_count = loot_obj_inv_count;
            slot_num = slot_num_under_mouse % 2000;
            left_side_last_slot_num = (loot_obj_inv_count - 1 ) / 2;
            if loot_obj_inv_count <= 0 or (slot_num >= 6 + ((loot_obj_inv_count - loot_obj_inv_offset) / 2)) or (dude_inv_count <= 10 andAlso slot_num > left_side_last_slot_num andAlso slot_num < 6) then begin
               //nothing and refresh
            end
            else begin
               if loot_obj_inv_count <= 10 andAlso slot_num >= 6 then begin
                  item_inv_num = (loot_obj_inv_count - 1) - slot_num + (5 - left_side_last_slot_num);
                  item = inven_ptr(obj_loot, item_inv_num);
                  item_count = obj_is_carrying_obj(obj_loot, item);
                  orig_item_count = item_count;
               end
               else begin
                  if slot_num <= 5 then begin
                     item_inv_num = (loot_obj_inv_count - 1) - slot_num;
                  end
                  else begin
                     item_inv_num = (loot_obj_inv_count - 1) - (loot_obj_inv_offset + (loot_obj_inv_count + 1) % 2) / 2 - ((loot_obj_inv_count + loot_obj_inv_count % 2) / 2) - (slot_num % 6);
                  end
                  item = inven_ptr(obj_loot, item_inv_num);
                  item_count = obj_is_carrying_obj(obj_loot, item);
                  orig_item_count = item_count;
               end
               if orig_item_count > 1 then begin
                  steal_chance = get_chance_to_steal_min_item_count(dude_obj, obj_loot, item, 0, orig_item_count);
                  item_count = steal_chance / 10000;
                  steal_chance = steal_chance % 10000;
                  orig_steal_chance = steal_chance;
                  if steal_chance > 0 andAlso mouse_add > 0 then begin
                     if obj_pid(item) == PID_BOTTLE_CAPS then begin
                        item_count += mouse_add * 100;
                        if item_count > orig_item_count then begin
                           mouse_add = -1;
                           item_count = orig_item_count;
                           mouse_add_last = mouse_add;
                        end
                     end
                     else begin
                        item_count += mouse_add;
                        if item_count > orig_item_count then begin
                           mouse_add = 0;
                           item_count = orig_item_count;
                        end
                     end
                     steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 0, item_count);
                     if steal_chance <= 0 then begin
                        mouse_add = -1;
                        mouse_add_last = mouse_add;
                     end
                  end
               end
               else begin
                  steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 0, item_count);
                  orig_steal_chance = steal_chance;
               end
               if steal_chance <= 9 then begin
                  if steal_chance < 0 then steal_chance = 0;
                  if orig_item_count > 1 then begin
                     if item_count <= 1 andAlso steal_chance <= 0 then begin
                        interface_print("0%", WINTYPE_INVENTORY, 416 + (60 * (slot_num / 6)), (69 + (((slot_num % 6) * 48))), (1 bwor 0x0010000));
                     end
                     else begin
                        for ( i = 1; i <= item_count; i *= 10) begin
                           new_x += 7;
                        end
                        interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 407-new_x + (60 * (slot_num / 6)), (69 + (((slot_num % 6) * 48))), (1 bwor 0x0010000));
                     end
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 414 + (60 * (slot_num / 6)), (69 + (((slot_num % 6) * 48))), (1 bwor 0x0010000));
                  end
                  if item_count <= 1 andAlso orig_steal_chance <= 0 andAlso show_skill_req > 0 then begin
                     steal_chance = get_chance_to_steal_without_item(dude_obj, obj_loot, item, 0, item_count) - 50000;
                     if steal_chance > 0 then begin
                        display_msg(parse_str_2(modmsg(94), steal_chance, obj_name(item)));
                     end
                  end
               end
               else begin
                  if orig_item_count > 1 then begin
                     for ( i = 1; i <= item_count; i *= 10) begin
                        new_x += 7;
                     end
                     interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 399-new_x + (60 * (slot_num / 6)), (69 + ( ((slot_num % 6) * 48))), (1 bwor 0x0010000));
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 405 + (60 * (slot_num / 6)), (69 + ( ((slot_num % 6) * 48))), (1 bwor 0x0010000));
                  end
               end

            end
         end
         else if slot_num_under_mouse >= 1000 andAlso slot_num_under_mouse < (1000 + inven_max_slots) then begin
            obj_loot = loot_obj;
            dude_inv_count = inven_count(dude_obj) - dude_inv_offset;
            last_dude_inv_count = dude_inv_count;
            slot_num = slot_num_under_mouse % 1000;
            left_side_last_slot_num = (dude_inv_count - 1 ) / 2;
            if dude_inv_count <= 0 or (slot_num >= 6 + ((dude_inv_count - dude_inv_offset) / 2)) or (dude_inv_count <= 10 andAlso slot_num > left_side_last_slot_num andAlso slot_num < 6) then begin
               //nothing and refresh
            end
            else begin
               if dude_inv_count <= 10 andAlso slot_num >= 6 then begin
                  item_inv_num = (dude_inv_count - 1) - slot_num + (5 - left_side_last_slot_num);
                  item = inven_ptr(dude_obj, item_inv_num);
                  item_count = obj_is_carrying_obj(dude_obj, item);
                  orig_item_count = item_count;
               end
               else begin
                  if slot_num <= 5 then begin
                     item_inv_num = (dude_inv_count - 1) - slot_num;
                  end
                  else begin
                     item_inv_num = (dude_inv_count - 1) - (dude_inv_offset + (dude_inv_count + 1) % 2) / 2 - ((dude_inv_count + dude_inv_count % 2) / 2) - (slot_num % 6);
                  end
                  item = inven_ptr(dude_obj, item_inv_num);
                  item_count = obj_is_carrying_obj(dude_obj, item);
                  orig_item_count = item_count;
               end
              if orig_item_count > 1 then begin
                  steal_chance = get_chance_to_steal_min_item_count(dude_obj, obj_loot, item, 1, orig_item_count);
                  item_count = steal_chance / 10000;
                  steal_chance = steal_chance % 10000;
                  orig_steal_chance = steal_chance;
                  if steal_chance > 0 andAlso mouse_add > 0 then begin
                     if obj_pid(item) == PID_BOTTLE_CAPS then begin
                        item_count += mouse_add * 100;
                        if item_count > orig_item_count then begin
                           mouse_add = -1;
                           item_count = orig_item_count;
                           mouse_add_last = mouse_add;
                        end
                     end
                     else begin
                        item_count += mouse_add;
                        if item_count > orig_item_count then begin
                           mouse_add = 0;
                           item_count = orig_item_count;
                        end
                     end
                     steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 1, item_count);
                     if steal_chance <= 0 then begin
                        mouse_add = -1;
                        mouse_add_last = mouse_add;
                     end
                  end
               end
               else begin
                  steal_chance = get_chance_to_steal(dude_obj, obj_loot, item, 1, item_count);
                  orig_steal_chance = steal_chance;
               end
               if steal_chance <= 9 then begin
                  if orig_item_count > 1 then begin
                     if item_count <= 1 andAlso steal_chance <= 0 then begin
                        interface_print("0%", WINTYPE_INVENTORY, 224 + (60 * (slot_num / 6)), (69 + ((slot_num % 6) * 48)), (1 bwor 0x0010000));
                     end
                     else begin
                        for ( i = 1; i <= item_count; i *= 10) begin
                           new_x += 7;
                        end
                        interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 218 - new_x + (60 * (slot_num / 6)), (69 + ((slot_num % 6) * 48)), (1 bwor 0x0010000));
                     end
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 225 + (60 * (slot_num / 6)), (69 + ((slot_num % 6) * 48)), (1 bwor 0x0010000));
                  end
                  if item_count <= 1 andAlso orig_steal_chance <= 0 andAlso show_skill_req > 0 then begin
                     steal_chance = get_chance_to_steal_without_item(dude_obj, obj_loot, item, 1, item_count) - 50000;
                     if steal_chance > 0 then begin
                        display_msg(parse_str_2(modmsg(95), steal_chance, obj_name(item)));
                     end
                  end
               end

               else begin
                  if orig_item_count > 1 then begin
                     for ( i = 1; i <= item_count; i *= 10) begin
                        new_x += 7;
                     end
                     interface_print(item_count+"-"+steal_chance+"%", WINTYPE_INVENTORY, 210 - new_x + (60 * (slot_num / 6)), (69 + ((slot_num % 6) * 48)), (1 bwor 0x0010000));
                  end
                  else begin
                     interface_print(steal_chance+"%", WINTYPE_INVENTORY, 217 + (60 * (slot_num / 6)), (69 + ((slot_num % 6) * 48)), (1 bwor 0x0010000));
                  end
               end
            end
         end
         sfall_func3("interface_overlay", WINTYPE_INVENTORY, 3,0);
         show_skill_req = 0;
      end
   end
end


procedure MOUSECLICK_HOOK begin
   variable event = get_sfall_arg;
   variable button = get_sfall_arg;

   if steal_chance_win > 0 andAlso get_game_mode bwand INTFACELOOT then begin
      if event == 1 then begin
         if button == 1 then begin
            mouse_add += 1;
            show_skill_req = 1;
         end
      end
   end
end

//procedure KEYPRESS_HOOK begin
//
//
//end

procedure remove_script_save_lvars(variable target) begin
   variable tar_script = get_script(target);
   variable arr_len;
   variable arr_key;
   variable uniq_id = get_unique_id(target);
   variable lvar;
   variable i;
   if tar_script > 0 then begin
      arr_len = len_array(timed_event_targets_lvar_array);
      //get the first empty available arr_key
      arr_key = scan_array(timed_event_targets_lvar_array, get_unique_id(target));
      if arr_key < 0 then begin
         for (i = 0 ; i < (2 * arr_len) + 300 ; i += (lvar_max+1)) begin
            if get_array(timed_event_targets_lvar_array, i) <= 0 then begin
               arr_key = i;
               break;
            end
         end
      end
      set_array(timed_event_targets_lvar_array,arr_key,get_unique_id(target));
      arr_key = arr_key + 1;
      for (i = 0; i <= lvar_max; i++) begin
         set_self(target);
         lvar = local_var((i));
         set_self(0);
         if lvar == 0 then lvar = 0.0;
         set_array(timed_event_targets_lvar_array,(arr_key + i),lvar);
      end
      remove_script(target);
      set_object_data(target, OBJ_DATA_ID, uniq_id);
   end
end

procedure add_script_restore_lvars(variable target, variable script_id) begin
   variable arr_key;
   variable lvar_value;
   variable uniq_id;
   variable i;
   if script_id > 0 then begin
      uniq_id = get_unique_id(target);
      arr_key = scan_array(timed_event_targets_lvar_array, get_unique_id(target));
      if arr_key >= 0 then begin
         set_script(target,(script_id+0x80000000));
         //return original uniq_id
         set_object_data(target, OBJ_DATA_ID, uniq_id);
         set_array(timed_event_targets_lvar_array,(arr_key),0);
         arr_key = arr_key + 1;
         for (i = 0; i <= lvar_max; i++) begin
            lvar_value = get_array(timed_event_targets_lvar_array,(arr_key + i));
            if lvar_value == 0.0 then lvar_value = 0;
            set_self(target);
            set_local_var(i, lvar_value);
            set_self(0);
            set_array(timed_event_targets_lvar_array,(arr_key + i),0);
         end
      end
      else begin
         return;
      end
   end
   else begin
      return;
   end
end

procedure USEOBJON_HOOK begin
   variable target = get_sfall_arg;
   variable source_object = get_sfall_arg;
   variable arr_te_key;
   variable arr_te_num;
   if targets_prep_attack > 0 andAlso (source_object == dude_obj) then begin
      arr_te_key = scan_array(timed_event_targets_array, target);
      // setup attack on dude if target what to kill him and can see him
      if arr_te_key >= 0 then begin
         arr_te_num = get_array(timed_event_targets_array, (arr_te_key + arr_shift_fixed_num));
         if arr_te_num == 1 andAlso obj_can_see_obj(target, dude_obj) then begin
            call attack_the_dude(target);
            set_sfall_return(-1);
            return;
         end
      end
   end
end

procedure STDPROCEDURE_HOOK begin
   variable std_num = get_sfall_arg;
   variable target = get_sfall_arg;
   variable source_object = get_sfall_arg;
   variable arr_te_key;
   variable arr_te_num;
   if targets_prep_attack > 0 andAlso (std_num == talk_proc or (source_object == dude_obj andAlso \
      (std_num == use_proc or\
      std_num == use_obj_on_proc or\
      std_num == use_skill_on_proc or\
      std_num == 24 or\
      std_num == use_obj_on_proc))) then begin
      arr_te_key = scan_array(timed_event_targets_array, target);
      // setup attack on dude if target wants to attack him and sees him
      if arr_te_key >= 0 then begin
         arr_te_num = get_array(timed_event_targets_array, (arr_te_key + arr_shift_fixed_num));
         if arr_te_num == 1 andAlso (obj_can_see_obj(target, dude_obj) or std_num == talk_proc) then begin
            call attack_the_dude(target);
            set_sfall_return(-1);
            return;
         end
      end
   end
end

procedure set_anim_tar_obj(variable target) begin
   variable wpn_anim_dude;
   variable uniq_id = set_unique_id(target);
   variable i;
   anim_tar_obj = target;
   anim_tar_script = get_script(target);
   if anim_tar_script > 0 then begin
      anim_tar_lvars_arr = create_array_map;
      for (i = 0; i <= 50; i++) begin
         set_self(target);
         set_array(anim_tar_lvars_arr,i,local_var(i));
         set_self(0);
      end
      remove_script(target);
      set_object_data(anim_tar_obj, OBJ_DATA_ID, uniq_id);
   end
   anim_tar_kill_type = critter_kill_type(target);
   anim_tar_gender = get_critter_stat(target, STAT_gender);
   anim_tar_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
   anim_tar_tile = tile_num(target);
   anim_tar_rot_tile = tile_num_in_direction(anim_tar_tile, anim_tar_rot, 1);
   anim_tar_melee_dmg = get_critter_stat(target,STAT_melee_dmg);
   anim_tar_unarmed_skill = has_skill(target, SKILL_UNARMED_COMBAT) - dude_lu;
   if anim_tar_weapon > 0 andAlso right_hand_stolen <= 0 andAlso obj_item_subtype(anim_tar_weapon) == item_type_weapon then begin
      anim_tar_weapon_anim = get_proto_data(obj_pid(anim_tar_weapon), PROTO_WP_ANIM);
      if anim_tar_weapon_anim > WPN_ANIM_NONE then begin
         anim_tar_fire_arm = anim_tar_weapon;
         if (anim_tar_weapon_anim < WPN_ANIM_PISTOL) or (anim_tar_weapon_anim == WPN_ANIM_ROCKET_LAUNCHER) then begin
            anim_tar_fire_arm = -1;
         end
      end
      if (anim_tar_weapon_anim <= WPN_ANIM_NONE) then begin
         anim_tar_weapon = -1;
         anim_tar_fire_arm = -1;
      end
   end
   else begin
      anim_tar_weapon = -1;
      anim_tar_fire_arm = -1;
   end
   if active_hand then begin
      dude_wpn = critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND);
      if dude_wpn > 0 andAlso obj_item_subtype(dude_wpn) == item_type_weapon then begin
         wpn_anim_dude = get_proto_data(obj_pid(dude_wpn), PROTO_WP_ANIM);
         if (wpn_anim_dude <= WPN_ANIM_NONE) then begin
            dude_wpn = -1;
         end
      end
      else begin
         dude_wpn = -1;
      end
   end
   else begin
      dude_wpn = critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND);
      if dude_wpn > 0 andAlso obj_item_subtype(dude_wpn) == item_type_weapon then begin
         wpn_anim_dude = get_proto_data(obj_pid(dude_wpn), PROTO_WP_ANIM);
         if (wpn_anim_dude <= WPN_ANIM_NONE) then begin
            dude_wpn = -1;
         end
      end
      else begin
         dude_wpn = -1;
      end
   end
end

procedure create_timed_event_array begin
   if not(array_exists(timed_event_targets_array)) then begin
      timed_event_targets_array = create_array_map;
      save_array("timed_event_targets_array", timed_event_targets_array);
   end
end


procedure add_to_timed_event_array(variable target,variable event_num, variable time_in_game_ticks, variable new_tile_or_minus_one, variable new_rot_or_minus_one, variable new_script_id_or_minus_two) begin
   variable arr_len;
   variable arr_key;
   variable timed_event_target;
   variable timed_event_target_id;
   variable timed_event_target_fixed_num;
   variable timed_event_target_fixed_time;
   variable timed_event_target_tile;
   variable timed_event_target_rot;
   variable timed_event_target_script;
   variable i;
   call create_timed_event_array;
      arr_len = len_array(timed_event_targets_array);

      //get the first empty available arr_key
      for (i = 0 ; i < (2 * arr_len) + 60 ; i += (arr_shift_max + 1)) begin
         if get_array(timed_event_targets_array, i) <= 0 then begin
            arr_key = i;
            break;
         end
      end
      if arr_key < 0 then arr_key = 0;
      //save target ptr
      timed_event_target = target;
      set_array(timed_event_targets_array, (arr_key + arr_shift_ptr), timed_event_target);
      //
      //save target id
      timed_event_target_id = set_unique_id(target);
      set_array(timed_event_targets_array, (arr_key + arr_shift_id), timed_event_target_id);
      //
      //save event num
      timed_event_target_fixed_num = event_num;
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num), timed_event_target_fixed_num);
      //
      //save event time
      timed_event_target_fixed_time = game_time + time_in_game_ticks;
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time), timed_event_target_fixed_time);
      //
      //save tile_num
      if new_tile_or_minus_one <= 0 then begin
         timed_event_target_tile = tile_num(timed_event_target);
      end
      else begin
         timed_event_target_tile = new_tile_or_minus_one;
      end
      set_array(timed_event_targets_array, (arr_key + arr_shift_tile), timed_event_target_tile);
      //
      //save rotation
      if new_rot_or_minus_one < 0 then begin
         timed_event_target_rot = has_trait(TRAIT_OBJECT, timed_event_target, OBJECT_CUR_ROT);
      end
      else begin
         if new_rot_or_minus_one > 5 then new_rot_or_minus_one = 5;
         timed_event_target_rot = new_rot_or_minus_one;
      end
      timed_event_target_rot = timed_event_target_rot + 1;
      set_array(timed_event_targets_array, (arr_key + arr_shift_rot), timed_event_target_rot);
      //
      //save script id
      if new_tile_or_minus_one < -1 then begin
         timed_event_target_tile = get_script((timed_event_target));
      end
      else begin
         timed_event_target_script = new_script_id_or_minus_two;
      end
      set_array(timed_event_targets_array, (arr_key + arr_shift_script), timed_event_target_script);
      //
      //occupy empty values
      for (i = 0; i <= arr_shift_max; i++) begin
         if get_array(timed_event_targets_array, (arr_key + i)) <= 0 then set_array(timed_event_targets_array, (arr_key + i), 0.0);
      end
      //
end

procedure assign_timed_event_number(variable target,variable event_num, variable time_in_game_ticks, variable new_tile_or_minus_one, variable new_rot_or_minus_one, variable new_script_id_or_minus_two) begin
   //add_global_timer_event(time_in_game_ticks, event_num);
   //if timer_added_time <= game_time then begin
      add_global_timer_event(time_in_game_ticks, fixed_param_steal);
   //end
   call add_to_timed_event_array(target,event_num, time_in_game_ticks, new_tile_or_minus_one, new_rot_or_minus_one,new_script_id_or_minus_two);
end

procedure reset_and_add_timed_event_timer(variable target,variable event_num, variable new_time) begin
   variable arr_key = scan_array(timed_event_targets_array,target);
   variable orig_event_num = get_array(timed_event_targets_array,(arr_key + arr_shift_fixed_num));
   variable new_timed_event_target_fixed_time = game_time + new_time;
   if orig_event_num == event_num then begin
      add_global_timer_event(new_timed_event_target_fixed_time, fixed_param_steal);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time), new_timed_event_target_fixed_time);
   end
end

procedure rm_timed_event_target(variable target,variable arr_key) begin
   variable i;
   for (i = 0; i <= arr_shift_max ; i++) begin
      set_array(timed_event_targets_array, (arr_key + i), 0);
   end
end

procedure rm_timed_event_number(variable target,variable event_num) begin
   variable arr_key = scan_array(timed_event_targets_array,target);
   variable orig_event_num = get_array(timed_event_targets_array,(arr_key + arr_shift_fixed_num));
   variable i;
   if orig_event_num == event_num then begin
      for (i = 0; i <= arr_shift_max ; i++) begin
         set_array(timed_event_targets_array, (arr_key + i), 0);
      end
   end
end

procedure get_dude_worn_armor_perk begin
   variable armor;
   variable armor_perk;
   armor = critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
   if armor > 0 then begin
      armor_perk = get_proto_data(obj_pid(armor), PROTO_AR_PERK);
   end
   return armor_perk;
end

procedure player_wearing_power_armor begin
   variable armor_perk = get_dude_worn_armor_perk;
   if armor_perk == PERK_armor_powered or armor_perk == PERK_armor_advanced_1 or armor_perk == PERK_armor_advanced_2 then begin
      return true;
   end
   else begin
      return false;
   end
end

procedure add_to_planted_items_ptr_arr(variable item_ptr,variable item_quantity) begin
   variable arr_key;
   if item_quantity <= 0 then item_quantity = 1;
   if array_exists(planted_items_ptr_arr) then begin
      if not(is_in_array(item_ptr,planted_items_ptr_arr)) then begin
         arr_key = len_array(planted_items_ptr_arr);
         set_array(planted_items_ptr_arr, arr_key, item_ptr);
         set_array(planted_items_quantity_arr, arr_key, item_quantity);
      end
      else begin
         arr_key = scan_array(planted_items_ptr_arr,item_ptr);
         set_array(planted_items_quantity_arr, arr_key, (get_array(planted_items_quantity_arr,arr_key) + item_quantity));
      end
   end
   else begin
      planted_items_ptr_arr = create_array_map;
      planted_items_quantity_arr = create_array_map;
      if not(is_in_array(item_ptr,planted_items_ptr_arr)) then begin
         arr_key = len_array(planted_items_ptr_arr);
         set_array(planted_items_ptr_arr, arr_key, item_ptr);
         set_array(planted_items_quantity_arr, arr_key, item_quantity);
      end
   end
end

procedure add_to_stolen_items_ptr_arr(variable item_ptr,variable item_quantity) begin
   variable arr_key;
   if item_quantity <= 0 then item_quantity = 1;
   if array_exists(stolen_items_ptr_arr) then begin
      if not(is_in_array(item_ptr,stolen_items_ptr_arr)) then begin
         arr_key = len_array(stolen_items_ptr_arr);
         set_array(stolen_items_ptr_arr, arr_key, item_ptr);
         set_array(stolen_items_quantity_arr, arr_key, item_quantity);
      end
      else begin
         arr_key = scan_array(stolen_items_ptr_arr,item_ptr);
         set_array(stolen_items_quantity_arr, arr_key, (get_array(stolen_items_quantity_arr,arr_key) + item_quantity));
      end
   end
   else begin
      stolen_items_ptr_arr = create_array_map;
      stolen_items_quantity_arr = create_array_map;
      if not(is_in_array(item_ptr,stolen_items_ptr_arr)) then begin
         arr_key = len_array(stolen_items_ptr_arr);
         set_array(stolen_items_ptr_arr, arr_key, item_ptr);
         set_array(stolen_items_quantity_arr, arr_key, item_quantity);
      end
   end
end

procedure callback_pickup_all_on_tile begin
   variable target = anim_tar_obj;
   variable item_ptr;
   variable item_pid;
   variable tile = tile_to_pickup;
   variable tile_elevation = elevation(dude_obj);
   variable arr_items_on_tile = tile_get_objs(tile, tile_elevation);
   if len_array(dropped_items_pids_array) > 0 then begin
      foreach item_ptr in arr_items_on_tile begin
         if item_ptr > 0 then begin
            item_pid = obj_pid(item_ptr);
            if is_in_array(item_pid, dropped_items_pids_array) then begin
               set_array(dropped_items_pids_array, scan_array(dropped_items_pids_array,item_pid),0);
               add_obj_to_inven(target, item_ptr);
            end
         end
      end
   end
   if array_exists(arr_items_on_tile) then free_array(arr_items_on_tile);
   if array_exists(dropped_items_pids_array) then free_array(dropped_items_pids_array);
end

procedure callback_put_on_tile_all_stolen_items begin
   variable target = anim_tar_obj;
   variable item_ptr;
   variable item_pid;
   variable item_quantity;
   variable arr_len = len_array(stolen_items_ptr_arr);
   variable tile = tile_to_pickup;
   variable tile_elevation = elevation(dude_obj);
   variable tmp;
   variable tmp2;
   variable i;
   if target > 0 andAlso arr_len > 0 then begin
      dropped_items_pids_array = create_array_map;
      for (i = 0; i < (arr_len); i++) begin
         item_ptr = get_array(stolen_items_ptr_arr, i);
         if item_ptr > 0 then begin
            item_pid = obj_pid(item_ptr);
            item_ptr = obj_carrying_pid_obj(dude_obj, item_pid);
            item_quantity = get_array(stolen_items_quantity_arr, i);
            if item_ptr > 0 then begin
               tmp = rm_mult_objs_from_inven(dude_obj, item_ptr, item_quantity);
               set_array(dropped_items_pids_array, len_array(dropped_items_pids_array),item_pid);
               if tmp > 1 then begin
                  tmp2 = create_object(item_pid, tile, tile_elevation);
                  add_mult_objs_to_inven(target, tmp2, (tmp-1));
               end
               move_to(item_ptr, tile, tile_elevation);
            end
         end
      end
   end
   if array_exists(stolen_items_ptr_arr) then free_array(stolen_items_ptr_arr);
   if array_exists(stolen_items_ptr_arr) then free_array(stolen_items_quantity_arr);
end

procedure callback_target_returns_its_stolen_items_ALL begin
   variable target = anim_tar_obj;
   variable item_ptr;
   variable item_quantity;
   variable arr_len = len_array(stolen_items_ptr_arr);
   variable tmp;
   variable i;
   if target > 0 andAlso arr_len > 0 then begin
      for (i = 0; i < (arr_len); i++) begin
         //item_ptr = get_array(stolen_items_ptr_arr, i);
         item_ptr = obj_carrying_pid_obj(dude_obj, obj_pid(get_array(stolen_items_ptr_arr, i)));
         item_quantity = get_array(stolen_items_quantity_arr, i);
         if item_ptr > 0 then begin
            tmp = rm_mult_objs_from_inven(dude_obj, item_ptr, item_quantity);
            add_mult_objs_to_inven(target, item_ptr, tmp);
            target_returns_goods = 1;
         end
      end
      if dude_was_robbed <= 0 andAlso target_returns_goods > 0 then display_msg(obj_name(target) +modmsg(msg_takes_back_stolen));
   end
   if array_exists(stolen_items_ptr_arr) then free_array(stolen_items_ptr_arr);
   if array_exists(stolen_items_ptr_arr) then free_array(stolen_items_quantity_arr);
end

procedure callback_target_returns_its_stolen_items begin
   variable target = anim_tar_obj;
   variable item_ptr;
   variable item_quantity;
   variable arr_len = len_array(stolen_items_ptr_arr);
   variable tmp;
   variable i;
   variable returned;
   variable target_pe;
   variable dude_sneak_skill = (has_skill(dude_obj, SKILL_SNEAK) + dude_lu);
   if dude_sneak_skill < 0 then dude_sneak_skill = 0;
   if target > 0 andAlso arr_len > 0 then begin
      for (i = 0; i < (arr_len); i++) begin
         item_ptr = obj_carrying_pid_obj(dude_obj, obj_pid(get_array(stolen_items_ptr_arr, i)));
         item_quantity = get_array(stolen_items_quantity_arr, i);
         target_pe = 50 + (10 * (get_critter_stat(target, STAT_pe) - random(0,(dude_lu/2))));
         if item_ptr > 0 andAlso (random(0,target_pe) >= random(0,dude_sneak_skill)) then begin
            if item_quantity > 2 andAlso (random(0, dude_sneak_skill) > random(0,target_pe)) then begin
               item_quantity = random(1,item_quantity);
               returned -= 1;
            end
            tmp = rm_mult_objs_from_inven(dude_obj, item_ptr, item_quantity);
            add_mult_objs_to_inven(target, item_ptr, tmp);
            returned += 2;
         end
      end
      if dude_was_robbed <= 0 then begin
         if returned >= arr_len * 2 then begin
            display_msg(obj_name(target) + modmsg(msg_return_stolen));
         end
         else if returned > 0 andAlso returned < arr_len * 2 then begin
            display_msg(modmsg(msg_stolen_hided_part));
            display_msg(obj_name(target) + modmsg(msg_return_stole_part));
         end
         else begin
            display_msg(modmsg(msg_stolen_hided_all) + obj_name(target) + modmsg(msg_return_stole_none));
         end
      end
   end
   target_returns_goods = returned;
   if array_exists(stolen_items_ptr_arr) then free_array(stolen_items_ptr_arr);
   if array_exists(stolen_items_ptr_arr) then free_array(stolen_items_quantity_arr);
end

procedure callback_target_returns_planted_items begin
   variable target = anim_tar_obj;
   variable item_ptr;
   variable item_quantity;
   variable arr_len = len_array(planted_items_ptr_arr);
   variable tmp;
   variable i;
   variable target_pe;
   variable skill_roll;
   if target > 0 andAlso arr_len > 0 then begin
      for (i = 0; i < (arr_len); i++) begin
         item_ptr = obj_carrying_pid_obj(dude_obj, obj_pid(get_array(planted_items_ptr_arr, i)));
         item_quantity = get_array(planted_items_quantity_arr, i);
         if obj_is_carrying_obj(target,item_ptr) then begin
            tmp = rm_mult_objs_from_inven(target, item_ptr, item_quantity);
            add_mult_objs_to_inven(dude_obj, item_ptr, tmp);
         end
      end
   end
   if array_exists(planted_items_ptr_arr) then free_array(planted_items_ptr_arr);
   if array_exists(planted_items_quantity_arr) then free_array(planted_items_quantity_arr);
end

procedure is_in_array_last_pickpocket_targets(variable target, variable add_value) begin
   variable arr_st_key;
   variable pickpocket_count;
   arr_st_key = scan_array(last_pickpocket_targets_array, get_unique_id(target));
   if arr_st_key >= 0 then begin
      if get_array(last_pickpocket_targets_array, (arr_st_key + arr_lpt_shift_time)) + clear_pickpocket_targets_array_time <= game_time then begin
         set_array(last_pickpocket_targets_array, (arr_st_key + arr_lpt_shift_count), add_value);
         pickpocket_count =  add_value;
         if add_value > 0 then set_array(last_pickpocket_targets_array, (arr_st_key + arr_lpt_shift_time), game_time);
      end
      else begin
         pickpocket_count = (get_array(last_pickpocket_targets_array, (arr_st_key + arr_lpt_shift_count)) + add_value);
      end
      set_array(last_pickpocket_targets_array, (arr_st_key + arr_lpt_shift_count), pickpocket_count);
      return pickpocket_count;
   end
   else begin
      return 0;
   end
end

procedure not_is_in_array_last_pickpocket_targets(variable target,variable add_value) begin
   variable arr_st_key;
   variable arr_len = len_array(timed_event_targets_array);
   variable pickpocket_count;
   variable i;
   //get the first empty available arr_key
   for (i = 0 ; i < (2 * arr_len) + 60 ; i += (arr_lpt_shift_max + 1)) begin
      if get_array(last_pickpocket_targets_array, i) <= 0 then begin
         arr_st_key = i;
         break;
      end
   end
   set_array(last_pickpocket_targets_array, (len_array(last_pickpocket_targets_array) ), set_unique_id(target));
   arr_st_key = scan_array(last_pickpocket_targets_array, get_unique_id(target));
   set_array(last_pickpocket_targets_array, (arr_st_key + arr_lpt_shift_time), game_time);
   set_array(last_pickpocket_targets_array, (arr_st_key + arr_lpt_shift_count), add_value);
   pickpocket_count = add_value;
   //occupy empty values
   for (i = 0; i <= arr_lpt_shift_max; i++) begin
      if get_array(last_pickpocket_targets_array, (arr_st_key + i)) <= 0 then set_array(last_pickpocket_targets_array, (arr_st_key + i), 0.0);
   end
   return pickpocket_count;
end

procedure clear_array_last_pickpocket_targets begin
   variable i;
   variable j;
   variable arr_st_key;
   variable arr_st_time;
   variable ar_st_len = len_array(last_pickpocket_targets_array);
   for (i = 0; i < ar_st_len; i+=(arr_lpt_shift_max+1)) begin
      arr_st_key = i;
      arr_st_time = get_array(last_pickpocket_targets_array, (arr_st_key + arr_lpt_shift_time));
      if arr_st_time > 0 then begin
         if arr_st_time + clear_pickpocket_targets_array_time <= game_time then begin
            for (j = 0; j <= arr_lpt_shift_max ; j++) begin
               set_array(last_pickpocket_targets_array, (arr_st_key + j), 0);
            end
         end
      end
   end
end

procedure save_arrays_last_pickpocket_targets begin
   save_array("last_pickpocket_targets_array",last_pickpocket_targets_array);
end

procedure create_arrays_last_pickpocket_targets_and_add_target(variable target, variable add_value) begin
   // Create an saved array to store critters that the player has already tried to steal from and was noticed by them
   if not(array_exists(last_pickpocket_targets_array)) then begin
      if last_pickpocket_targets_array <= 0 then begin
         last_pickpocket_targets_array = create_array_map;
      end
      // add to array
      if not(is_in_array(set_unique_id(target),last_pickpocket_targets_array)) then begin
         call not_is_in_array_last_pickpocket_targets(target,add_value);
      end
      // increase pickpocket_count if already in array and also reset to zero pickpocket_count if target forgot about player
      else begin
         call is_in_array_last_pickpocket_targets(target,add_value);
      end
      // save all new arrays in game save
      call save_arrays_last_pickpocket_targets();
   end
   else begin
      // increase the pickpocket_count if the player has already tried to steal and was noticed again
      if is_in_array(get_unique_id(target),last_pickpocket_targets_array) then begin
         call is_in_array_last_pickpocket_targets(target,add_value);
      end
      // add the creature to the array if it notices the player for the first time
      else begin
         call not_is_in_array_last_pickpocket_targets(target,add_value);
      end
   end
end

procedure get_tfsp_gvar_name(variable town_id) begin
   variable gvar_name;
   if town_id >= 0 then begin
      if town_id <= 9 then gvar_name = "TFSP000" + town_id;
      else if town_id <= 99 then gvar_name = "TFSP00" + town_id;
      else if town_id <= 999 then gvar_name = "TFSP0" + town_id;
      else if town_id <= 9999 then gvar_name = "TFSP" + town_id;
      return gvar_name;
   end
   else begin
      return -1;
   end
end

procedure get_tfsp_gvar_value(variable town_id) begin
   variable Gvar_name = get_tfsp_gvar_name(town_id);
   variable Gvar_value;
   if Gvar_name > 0 then begin
      Gvar_value = get_sfall_global_int(Gvar_name);
      return Gvar_value;
   end
   else begin
      return 0;
   end
end

procedure update_penalty_value(variable town_id) begin
   variable Gvar_name = get_tfsp_gvar_name(town_id);
   variable Gvar_value;
   variable Gvar_value_dec;
   variable new_Gvar_value;
   variable last_visit_days;
   variable rnd_days_to_dec;
   if Gvar_name > 0 then begin
      Gvar_value = get_sfall_global_int(Gvar_name);
   end
   else begin
      Gvar_value = 0;
   end
   if Gvar_value > 0 then begin
      new_Gvar_value = Gvar_value;
      last_visit_days = days_since_visited;
      rnd_days_to_dec = town_failed_stealing_penalty_dec_time;
      if last_visit_days > rnd_days_to_dec then begin
         Gvar_value_dec = (last_visit_days / rnd_days_to_dec) * town_failed_stealing_penalty_dec_per_one_time;
         if Gvar_value_dec > Gvar_value then Gvar_value_dec = Gvar_value;
         new_Gvar_value = Gvar_value - Gvar_value_dec;
         set_sfall_global(Gvar_name, new_Gvar_value);
      end
      caught_stealing_buy_penalty = 1 + (new_Gvar_value) * town_buy_price_penalty_mult;
      if new_Gvar_value >= town_sell_price_penalty_req then begin
         caught_stealing_sell_penalty = 1 - (new_Gvar_value) * town_sell_price_penalty_mult;
      end
   end
   else if Gvar_value < 0 then begin
      set_sfall_global(Gvar_name, 0);
      caught_stealing_buy_penalty = 1 + (new_Gvar_value) * town_buy_price_penalty_mult;
      if new_Gvar_value >= town_sell_price_penalty_req then begin
         caught_stealing_sell_penalty = 1 - (new_Gvar_value) * town_sell_price_penalty_mult;
      end
   end
end

procedure inc_tfsp_gvar_value(variable town_id,variable value) begin
   variable Gvar_name = get_tfsp_gvar_name(town_id);
   variable Gvar_value;
   variable new_Gvar_value;
   if Gvar_name > 0 then begin
      Gvar_value = get_sfall_global_int(Gvar_name);
      new_Gvar_value = Gvar_value + value;
      if new_Gvar_value < 0 then new_Gvar_value = 0;
      set_sfall_global(Gvar_name,new_Gvar_value);
      display_msg(modmsg(msg_gives_rumors_spread));
      remove_timer_event(4);
      add_global_timer_event(game_ticks(random(30, 60)),4);
   end
   else begin
      return;
   end
end


procedure map_exit_p_proc begin
   variable target;
   variable tar_tile;
   variable tar_rot;
   variable tar_cur_tile;
   variable tar_script;
   variable critter_on_tile;
   variable tile_elevation;
   variable arr_len = len_array(timed_event_targets_array);
   variable arr_key;
   variable event_num;
   variable blocking_obj;
   variable i;
   // Head back to original tile
   if arr_len >= 10 then begin
      if array_exists(anim_tar_lvars_arr) then free_array(anim_tar_lvars_arr);
      anim_tar_obj = -1;
      anim_tar_rot = -1;
      anim_tar_tile = -1;
      anim_tar_rot_tile = -1;
      anim_tar_kill_type = -1;
      anim_tar_gender = -1;
      anim_tar_melee_dmg = -1;
      anim_tar_unarmed_skill = -1;
      dude_was_robbed = -1;
      target_returns_goods = -1;
      tile_to_pickup = -1;
      anim_tar_fire_arm = -1;
      anim_tar_weapon = -1;
      dude_wpn = -1;
      dude_unwield = -1;
      anim_tar_script = -1;
      if anim_tar_obj > 0 then call clear_gvars();
      for (i = 0; i < (2 * arr_len) + 60; i += (arr_shift_max + 1)) begin
         arr_key = i;
         target = get_array(timed_event_targets_array, (arr_key + arr_shift_ptr));
         if target > 0 then begin
            float_msg(target, 0, 0);
            tar_tile = get_array(timed_event_targets_array, (arr_key + arr_shift_tile));
            tar_rot = (get_array(timed_event_targets_array, (arr_key + arr_shift_rot))) - 1;
            tile_elevation = elevation(target);
            blocking_obj = obj_blocking_tile(tar_tile, tile_elevation, BLOCKING_TYPE_BLOCK);
            if tar_tile != tile_num(target) then begin
               if blocking_obj <= 0 then begin
                  move_to(target, tar_tile, elevation(target));
               end
               // swap positio of target from array with critter blocking tile
               else begin
                  if obj_type(blocking_obj) == OBJ_TYPE_CRITTER then begin
                     tar_cur_tile = tile_num(target);
                     critter_on_tile = tile_get_next_critter(tar_tile, tile_elevation, 0);
                     move_to(target, tar_tile, elevation(target));
                     move_to(critter_on_tile, tar_cur_tile, elevation(target));
                  end
               end
            end
            anim(target, ANIMATE_ROTATION, tar_rot);
            event_num = get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num));
            if is_in_array(get_unique_id(target), timed_event_targets_lvar_array) then begin
               tar_script = (get_array(timed_event_targets_array, (arr_key + arr_shift_script)));
               call add_script_restore_lvars(target, tar_script);
            end
            reg_anim_clear(target);
            call rm_timed_event_target(target, arr_key);
         end
      end
      remove_timer_event(fixed_param_steal);
      targets_prep_attack = 0;
      if len_array(timed_event_targets_array) > 0 then begin
         for (i = 0; i < (arr_len*2 + 60); i ++) begin
            arr_key = i;
            target = get_array(timed_event_targets_array, (arr_key + arr_shift_ptr));
         end
      end
   end
end

procedure BARTERPRICE_HOOK begin
   variable merchant = get_sfall_arg_at(1);
   variable dude_buy_items_price;
   variable dude_sell_items_price;
   variable critter_container_dude_buy;
   variable critter_container_dude_sell;
   variable dude_buy_money;
   variable dude_sell_money;
   variable orig_dude_buy_items_price;
   variable orig_dude_sell_items_price;
   variable new_dude_buy_price;
   variable new_dude_sell_price;
   variable Lvar_pickpocket_count;
   variable was_caught_count;
   variable pickpocket_count;
   if caught_stealing_buy_penalty > 1 then begin
      dude_buy_items_price = get_sfall_arg_at(2);
      critter_container_dude_buy = get_sfall_arg_at(3);
      dude_buy_money = obj_is_carrying_obj_pid(critter_container_dude_buy, PID_BOTTLE_CAPS);
      orig_dude_buy_items_price = dude_buy_items_price - dude_buy_money;
      new_dude_buy_price = round(orig_dude_buy_items_price * (caught_stealing_buy_penalty + (was_caught_count * 0.08))) + dude_buy_money;
      set_sfall_return(new_dude_buy_price);
      set_sfall_arg(2, new_dude_buy_price);
      if caught_stealing_sell_penalty < 1 then begin
         pickpocket_count = is_in_array_last_pickpocket_targets(merchant, 0) - has_trait(TRAIT_PERK, dude_obj, PERK_harmless_perk) - has_trait(TRAIT_TRAIT, dude_obj, TRAIT_sex_appeal);
         Lvar_pickpocket_count = get_array(last_pickpocket_targets_array, (scan_array(last_pickpocket_targets_array, get_unique_id(merchant))+arr_lpt_shift_count));
         was_caught_count = (pickpocket_count - 1) / (value_caught_stealing - 1);
         critter_container_dude_sell = get_sfall_arg_at(6);
         dude_sell_items_price = get_sfall_arg_at(7);
         dude_sell_money = obj_is_carrying_obj_pid(critter_container_dude_sell, PID_BOTTLE_CAPS);
         orig_dude_sell_items_price = dude_sell_items_price - dude_sell_money;
         new_dude_sell_price = round(orig_dude_sell_items_price * (caught_stealing_sell_penalty - (was_caught_count * 0.08))) + dude_sell_money;
         //cap sell price at 10% of orig price
         if (new_dude_sell_price - dude_sell_money) < ceil(orig_dude_sell_items_price * 0.1) then new_dude_sell_price = ceil(orig_dude_sell_items_price * 0.1) + dude_sell_money;

         set_sfall_return(new_dude_sell_price);
         set_sfall_arg(7, new_dude_sell_price);
      end
   end
end

procedure speech_barter_penalty(variable activate) begin
   variable Gvar_value = get_tfsp_gvar_value(cur_town);
   variable skills_penalty = Gvar_value * 5;
   if Gvar_value > 0 then begin
      if activate then begin
         set_critter_skill_points(real_dude_obj, SKILL_CONVERSANT, get_critter_skill_points(real_dude_obj, SKILL_CONVERSANT)-skills_penalty);
         set_critter_skill_points(real_dude_obj, SKILL_BARTER, get_critter_skill_points(real_dude_obj, SKILL_BARTER)-skills_penalty);
      end
      else begin
         set_critter_skill_points(real_dude_obj, SKILL_CONVERSANT, get_critter_skill_points(real_dude_obj, SKILL_CONVERSANT)+skills_penalty);
         set_critter_skill_points(real_dude_obj, SKILL_BARTER, get_critter_skill_points(real_dude_obj, SKILL_BARTER)+skills_penalty);
      end
   end
end

procedure callback_reset_timed_event_timer_4 begin
   variable target;
   variable timer;
   variable arr_key;
   variable arr_len = len_array(timed_event_targets_array);
   variable event_num;
   variable targets_number_max;
   variable targets_number;
   variable i;
   for (i = 0; i < (2 * arr_len) + 60; i+=(arr_shift_max+1)) begin
      arr_key = i;
      target = get_array(timed_event_targets_array, (arr_key + arr_shift_ptr));
      if target > 0 then begin
         event_num = get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num));
            if event_num == 4 then begin
            timer = random(game_ticks(1),game_ticks(4));
            call reset_and_add_timed_event_timer(target, 4, timer);
         end
      end
   end
end

procedure callback_reset_timed_event_timer_3 begin
   variable target;
   variable timer;
   variable arr_key;
   variable arr_len = len_array(timed_event_targets_array);
   variable event_num;
   variable i;
   for (i = 0; i < arr_len + 60; i+= (arr_shift_max+1)) begin
      arr_key = i;
      target = get_array(timed_event_targets_array, (arr_key + arr_shift_ptr));
      if target > 0 then begin
         event_num = get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num));
            if event_num == 3 then begin
            timer = random(game_ticks(2),game_ticks(6));
            call reset_and_add_timed_event_timer(target, 3, timer);
         end
      end
   end
end

procedure add_timed_event_ATTACK_DUDE_ON_SIGHT(variable target, variable game_seconds) begin
   variable timed_event_num;
   variable timed_event_time;
   variable target_tile = tile_num(target);
   variable target_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
   variable target_script = get_script(target);
   variable arr_key;
   timer_added_time = 0;
   remove_timer_event(fixed_param_steal);
   targets_prep_attack += 1;
   if not(is_in_array(target,timed_event_targets_array)) then begin
      timed_event_num = 1;
      timed_event_time = game_seconds;
      call assign_timed_event_number(target, timed_event_num,timed_event_time,target_tile,target_rot,target_script);
   end
   else begin
      timed_event_num = 1;
      timed_event_time = game_time + game_seconds;
      arr_key = scan_array(timed_event_targets_array,target);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
      add_global_timer_event(timed_event_time, fixed_param_steal);
   end
end

procedure add_timed_event_FLEE_FROM_DUDE(variable target, variable game_seconds) begin
   variable timed_event_num;
   variable timed_event_time;
   variable target_tile = tile_num(target);
   variable target_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
   variable target_script = get_script(target);
   variable arr_key;
   timer_added_time = 0;
   remove_timer_event(fixed_param_steal);
   if not(is_in_array(target,timed_event_targets_array)) then begin
      timed_event_num = 2;
      timed_event_time = game_seconds;
      call assign_timed_event_number(target, timed_event_num,timed_event_time,target_tile,target_rot,target_script);
   end
   else begin
      timed_event_num = 2;
      timed_event_time = game_time + game_seconds;
      arr_key = scan_array(timed_event_targets_array,target);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
      add_global_timer_event(timed_event_time, fixed_param_steal);
   end
end

procedure add_timed_event_TURN_BACK(variable target, variable game_seconds) begin
   variable timed_event_num;
   variable timed_event_time;
   variable target_tile = tile_num(target);
   variable target_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
   variable target_script = get_script(target);
   variable arr_key;
   timer_added_time = 0;
   remove_timer_event(fixed_param_steal);
   if not(is_in_array(target,timed_event_targets_array)) then begin
      timed_event_num = 3;
      timed_event_time = game_seconds;
      call assign_timed_event_number(target, timed_event_num,timed_event_time,target_tile,target_rot,target_script);
   end
   else begin
      arr_key = scan_array(timed_event_targets_array,target);
      if get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num)) >= 3 then begin
         timed_event_num = 3;
         timed_event_time = game_time + game_seconds;
         set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
         set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
         add_global_timer_event(timed_event_time, fixed_param_steal);
      end
      else begin
         add_global_timer_event(timed_event_time, fixed_param_steal);
      end
   end
end

procedure callback_add_timed_event_ATTACK_DUDE_ON_SIGHT begin
   variable target = anim_tar_obj;
   variable timed_event_num;
   variable timed_event_time;
   variable arr_key;
   timer_added_time = 0;
   remove_timer_event(fixed_param_steal);
   targets_prep_attack += 1;
   if not(is_in_array(target,timed_event_targets_array)) then begin
      timed_event_num = 1;
      timed_event_time = game_ticks(6);
      call assign_timed_event_number(target, timed_event_num,timed_event_time,anim_tar_tile,anim_tar_rot,anim_tar_script);
   end
   else begin
      timed_event_num = 1;
      timed_event_time = game_time + game_ticks(6);
      arr_key = scan_array(timed_event_targets_array,target);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
      add_global_timer_event(timed_event_time, fixed_param_steal);
   end
end

procedure callback_add_timed_event_FLEE_FROM_DUDE begin
   variable target = anim_tar_obj;
   variable timed_event_num;
   variable timed_event_time;
   variable arr_key;
   timer_added_time = 0;
   remove_timer_event(fixed_param_steal);
   if not(is_in_array(target,timed_event_targets_array)) then begin
      timed_event_num = 2;
      timed_event_time = 1;
      call assign_timed_event_number(target, timed_event_num,timed_event_time,anim_tar_tile,anim_tar_rot,anim_tar_script);
   end
   else begin
      timed_event_num = 2;
      timed_event_time = 1;
      arr_key = scan_array(timed_event_targets_array,target);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
      add_global_timer_event(timed_event_time, fixed_param_steal);
   end
end

procedure callback_add_timed_event_TURN_BACK begin
   variable target = anim_tar_obj;
   variable timed_event_num;
   variable timed_event_time;
   variable arr_key;
   timer_added_time = 0;
   remove_timer_event(fixed_param_steal);
   if not(is_in_array(target,timed_event_targets_array)) then begin
      timed_event_num = 3;
      timed_event_time = game_ticks(random(2,4));
      call assign_timed_event_number(target, timed_event_num,timed_event_time,anim_tar_tile,anim_tar_rot,anim_tar_script);
   end
   else begin
      arr_key = scan_array(timed_event_targets_array,target);
      if get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num)) != 3 then begin
      timed_event_num = 3;
      timed_event_time = game_time + game_ticks(random(2,4));
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
      add_global_timer_event(timed_event_time, fixed_param_steal);
      end
      else begin
         add_global_timer_event(timed_event_time, fixed_param_steal);
      end
   end
end

procedure clear_gvars begin
   variable  i;
   variable lvar_value;
   variable uniq_id = get_unique_id(anim_tar_obj);
   if dude_will_die <= 0 andAlso dude_unwield > 0 andAlso dude_wpn > 0 then begin
      wield_obj_critter(dude_obj, dude_wpn);
      refresh_pc_art;
      intface_redraw;
      dude_wpn = -1;
      dude_unwield = -1;
   end
   add_global_timer_event(game_ticks(2), fixed_param_steal);
   reg_anim_clear(anim_tar_obj);
   if anim_tar_script > 0 then begin
      set_script(anim_tar_obj, (anim_tar_script+0x80000000));
      set_object_data(anim_tar_obj, OBJ_DATA_ID, uniq_id);
      for (i = 0; i <= 50 ; i++) begin
         lvar_value = get_array(anim_tar_lvars_arr, i);
         if lvar_value == 0.0 then lvar_value = 0;
         set_self(anim_tar_obj);
         set_local_var(i, get_array(anim_tar_lvars_arr, i));
         set_self(0);
      end
      free_array(anim_tar_lvars_arr);
   end
   dude_will_die = -1;
   anim_tar_obj = -1;
   anim_tar_rot = -1;
   anim_tar_tile = -1;
   anim_tar_rot_tile = -1;
   anim_tar_kill_type = -1;
   anim_tar_gender = -1;
   anim_tar_melee_dmg = -1;
   anim_tar_unarmed_skill = -1;
   dude_was_robbed = -1;
   target_returns_goods = -1;
   tile_to_pickup = -1;
   anim_tar_fire_arm = -1;
   anim_tar_weapon = -1;
   anim_tar_weapon_anim = -1;
   dude_wpn = -1;
   dude_unwield = -1;
   anim_tar_script = -1;
   attack_delay = 1;
   dude_is_in_anim = -1;
end

procedure get_tile_with_free_path(variable target) begin
   variable tar_tile = tile_num(target);
   variable next_tile;
   variable end_tile;
   variable path;
   variable count;
   variable rotation  = (rotation_to_tile(tile_num(dude_obj),tar_tile) - 1 + random(0,2)) % 6;
   variable max_count = random(12,18);
   variable new_max_count;
   variable arr_len;
   variable last_arr_len;
   //if no_anim_run_fid(target) then max_count = max_count - 7;
   for (count = 0; count < 15; count++) begin
      new_max_count = max_count - count;
      if new_max_count <= 0 then break;
      next_tile = tile_num_in_direction(tar_tile, rotation, new_max_count);
      path = path_find_to(target, next_tile, BLOCKING_TYPE_BLOCK);
      rotation = (rotation + count) % 6;
      arr_len = len_array(path);
      if arr_len > 5 then begin
         end_tile = next_tile;
         clear_array(path);
         return end_tile;
      end
      if arr_len > 0 andAlso arr_len > last_arr_len then begin
         end_tile = next_tile;
      end
   end
   if arr_len <= 0 then begin
      end_tile = tar_tile;
   end
   clear_array(path);
   return end_tile;
end

procedure show_float_msg_attack(variable target) begin
   variable target_kill_type;
   if target > 0 then target_kill_type = critter_kill_type(target);
   if target_kill_type == KILL_TYPE_super_mutant_kills then begin
      float_msg(target, modmsg(msg_supmut_attack), FLOAT_MSG_RED);
   end
   else if target_kill_type == KILL_TYPE_children_kills then begin
      float_msg(target, modmsg(msg_child_attack), FLOAT_MSG_RED);
   end
   else if target_kill_type == KILL_TYPE_robot_kills then begin
      float_msg(target, modmsg(msg_robot_attack), FLOAT_MSG_RED);
   end
   else begin
      float_msg(target, modmsg(msg_tough_human_attack), FLOAT_MSG_RED);
   end
end

procedure attack_the_dude(variable target) begin
   variable timed_event_num;
   variable timed_event_time;
   variable tar_rot;
   variable arr_key = scan_array(timed_event_targets_array, target);
   if tile_distance_objs(target,dude_obj) <= 10 andAlso obj_can_see_obj(target,dude_obj) then begin
      call show_float_msg_attack(target);
      attack_setup(target, dude_obj);
      targets_prep_attack_attacking = target;
      targets_prep_attack -= 1;
      timed_event_num = 3;
      timed_event_time = game_time + game_ticks(20);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
   end
   else begin
      // return to original rot;
      tar_rot = (get_array(timed_event_targets_array, (arr_key + arr_shift_rot))) - 1;
      anim(target, ANIMATE_ROTATION, tar_rot);
      targets_prep_attack -= 1;
      timed_event_num = 3;
      timed_event_time =  game_time + game_ticks(4);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
      set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
   end
end


procedure show_float_msg_fear(variable target) begin
   variable target_kill_type;
   if target > 0 then target_kill_type = critter_kill_type(target);
   //child
   if target_kill_type == KILL_TYPE_children_kills then begin
      float_msg(target, modmsg(msg_child_flee), FLOAT_MSG_RED);
   end
   //sup mut
   if target_kill_type == KILL_TYPE_super_mutant_kills then begin
      float_msg(target, modmsg(msg_supmut_flee), FLOAT_MSG_RED);
   end
   //robo
   else if target_kill_type == KILL_TYPE_robot_kills then begin
      float_msg(target, modmsg(msg_robot_flee), FLOAT_MSG_RED);
   end
   //else
   else begin
      float_msg(target, modmsg(msg_tough_human_flee), FLOAT_MSG_RED);
   end
end

procedure Flee_From_Dude_proc(variable target) begin
   variable tar_tile;
   variable tar_rot;
   variable flee_tile;
   variable timed_event_num;
   variable timed_event_time;
   variable arr_key = scan_array(timed_event_targets_array, target);
   variable distance = tile_distance_objs(target, dude_obj);
   if distance <= 10 andAlso obj_can_see_obj(target,dude_obj) then begin
      if random(0,80) then begin
         if not(random(0,2)) then call show_float_msg_fear(target);
         flee_tile = get_tile_with_free_path(target);
         animate_move_obj_to_tile(target, flee_tile, (ANIMATE_RUN bwor ANIMATE_INTERRUPT));
         timed_event_num = 2;
         timed_event_time = 1;
         set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
         set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
      end
      else begin
         // stops fleeing
         float_msg(target, modmsg(msg_gives_stop_flee), FLOAT_COLOR_NORMAL);
         timed_event_num = 3;
         timed_event_time = game_time + game_ticks(random(2,4));
         set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
         set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
      end
   end
   else begin
      if random(0,30) then begin
         if distance >= 25 andAlso not(random(0,5)) then begin
            // stops fleeing
            if not(random(0,5)) then float_msg(target, modmsg(msg_gives_stop_flee_questing), FLOAT_COLOR_NORMAL);
            tar_tile = get_array(timed_event_targets_array, (arr_key + arr_shift_tile));
            animate_move_obj_to_tile(target, tar_tile, ANIMATE_WALK);
         end
         timed_event_num = 2;
         timed_event_time = 1;
         set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
         set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
      end
      else begin
         // stops fleeing
         if not(random(0,5)) then float_msg(target, modmsg(msg_gives_stop_flee_questing), FLOAT_COLOR_NORMAL);
         timed_event_num = 3;
         timed_event_time = game_time + game_ticks(random(2,8));
         set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num),timed_event_num);
         set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),timed_event_time);
      end
   end
end

procedure show_float_msg_pls_dont_kill begin
   float_msg(anim_tar_obj, modmsg(msg_pls_dont_kill), random(FLOAT_MSG_NEAR_WHITE,FLOAT_MSG_WHITE));
end

procedure callback_show_float_msg_aiming begin
   float_msg(anim_tar_obj, modmsg(msg_aiming), random(FLOAT_MSG_NEAR_WHITE,FLOAT_MSG_WHITE));
end

procedure callback_show_float_msg_unaiming_normal begin
   float_msg(anim_tar_obj, modmsg(msg_unaiming_normal), random(FLOAT_MSG_YELLOW,FLOAT_MSG_WHITE));
end

procedure callback_show_float_msg_unaiming_aggresive begin
   float_msg(anim_tar_obj, modmsg(msg_unaiming_threat), FLOAT_MSG_LIGHT_RED);
end

procedure show_float_msg_tough_response begin
   if anim_tar_kill_type == KILL_TYPE_super_mutant_kills then begin
      float_msg(anim_tar_obj, modmsg(msg_supmut_non_combat_attack), FLOAT_MSG_LIGHT_RED);
   end
   else begin
      float_msg(anim_tar_obj, modmsg(msg_tough_human_non_combat_attack), FLOAT_MSG_LIGHT_RED);
   end
end

procedure show_float_msg_attack_frightened(variable target) begin
   variable target_kill_type;
   if target > 0 then target_kill_type = critter_kill_type(target);
   if target_kill_type == KILL_TYPE_children_kills then begin
      float_msg(target, modmsg(msg_child_flee), random(FLOAT_MSG_NEAR_WHITE,FLOAT_MSG_WHITE));
   end
   else begin
      if weak_fid(target) then begin
         float_msg(target, modmsg(msg_weak_flee), random(FLOAT_MSG_NEAR_WHITE,FLOAT_MSG_WHITE));
      end
      else begin
         float_msg(target, modmsg(msg_tough_human_flee), random(FLOAT_MSG_NEAR_WHITE,FLOAT_MSG_WHITE));
      end
   end

end

procedure show_float_msg_death_threat(variable target) begin
   variable target_kill_type;
   if target > 0 then target_kill_type = critter_kill_type(target);
   if target_kill_type == KILL_TYPE_super_mutant_kills then begin
      float_msg(target, modmsg(msg_supmut_threat), FLOAT_MSG_RED);
   end
   else if target_kill_type == KILL_TYPE_robot_kills then begin
      float_msg(target, modmsg(msg_robot_threat), FLOAT_MSG_RED);
   end
   else begin
      float_msg(target, modmsg(msg_tough_human_threat), FLOAT_MSG_RED);
   end
end

procedure callback_show_float_msg_name_calling begin
   if random(0,1) then begin
      if anim_tar_kill_type == KILL_TYPE_children_kills then begin
         float_msg(anim_tar_obj, modmsg(msg_child_name_calling), FLOAT_COLOR_BAD);
      end
      else begin
         float_msg(anim_tar_obj, modmsg(msg_tough_human_name_calling), FLOAT_COLOR_BAD);
      end
   end
end

procedure callback_show_float_msg_death_threat begin
   if anim_tar_kill_type == KILL_TYPE_super_mutant_kills then begin
      float_msg(anim_tar_obj, modmsg(msg_supmut_threat), FLOAT_MSG_RED);
   end
   else if anim_tar_kill_type == KILL_TYPE_super_mutant_kills then begin
      float_msg(anim_tar_obj, modmsg(msg_robot_threat), FLOAT_MSG_RED);
   end
   else begin
      float_msg(anim_tar_obj, modmsg(msg_tough_human_threat), FLOAT_MSG_RED);
   end
end

procedure show_float_msg_neutral_response begin
   variable stolen_arr_len = len_array(stolen_items_ptr_arr);
   variable planted_arr_len;
   if not(weak_fid(anim_tar_obj)) then begin
      if stolen_arr_len > 0 then begin
         // return pls!
         float_msg(anim_tar_obj, modmsg(msg_stolen_return), random(FLOAT_MSG_NEAR_WHITE,FLOAT_MSG_WHITE));
      end
      else begin
         float_msg(anim_tar_obj, modmsg(msg_stolen_zero), FLOAT_MSG_GREY);
      end
   end
   else begin
      if stolen_arr_len > 0 then begin
         float_msg(anim_tar_obj, modmsg(msg_stolen_return_weak), random(FLOAT_MSG_NEAR_WHITE,FLOAT_MSG_WHITE));
      end
      else begin
         float_msg(anim_tar_obj, modmsg(msg_stolen_zero), FLOAT_MSG_GREY);
      end
   end
end

procedure show_float_msg_harmless_frightened_response begin
   variable stolen_arr_len = len_array(stolen_items_ptr_arr);
   variable planted_arr_len = len_array(planted_items_ptr_arr);
   if stolen_arr_len > 0 then begin
      float_msg(anim_tar_obj, modmsg(msg_pretends_see_nothing_stolen), random(FLOAT_MSG_NEAR_WHITE,FLOAT_MSG_WHITE));
   end
   else if planted_arr_len > 0 andAlso stolen_arr_len <= 0 then begin
      float_msg(anim_tar_obj, modmsg(msg_pretends_see_nothing_planted), FLOAT_COLOR_NORMAL);
   end
   else if planted_arr_len <= 0 andAlso stolen_arr_len <= 0 then begin
      float_msg(anim_tar_obj, modmsg(msg_pretends_see_nothing), FLOAT_COLOR_AFRAID);
   end
end

procedure callback_show_float_msg_rare_response_child begin
   float_msg(anim_tar_obj, modmsg(msg_child_rare), random(6,9));
end

procedure callback_show_float_msg_common_response_child begin
   float_msg(anim_tar_obj, modmsg(msg_child_common), random(6,9));
end

procedure callback_rob_the_dude begin
   variable target = anim_tar_obj;
   variable money_ptr = obj_carrying_pid_obj(dude_obj, PID_BOTTLE_CAPS);
   variable money_count = obj_is_carrying_obj(dude_obj, money_ptr);
   variable money_stolen_ptr;
   variable money_stolen_quantity;
   variable inv_count;
   variable item_ptr;
   variable item_count;
   variable item_stolen_ptr;
   variable item_stolen_quantity = 1;
   variable dude_armor = critter_inven_obj2(dude_obj, INVEN_TYPE_WORN);
   variable dude_wpn = dude_wpn;
   variable dude_right_hand = critter_inven_obj2(dude_obj, INVEN_TYPE_RIGHT_HAND);
   variable dude_lest_hand = critter_inven_obj2(dude_obj, INVEN_TYPE_LEFT_HAND);
   variable i;
   variable tar_hp = (15 + get_critter_stat(target, STAT_max_hp));
   dude_was_robbed = 1;
   //variable inven_count
   // The pickpocket's target takes a certain amount of the player's money as compensation for moral damages.
   if money_count >= 20 then begin
      money_stolen_quantity = random(tar_hp, (tar_hp * 3));
      if money_stolen_quantity > money_count then money_stolen_quantity = money_count;
      money_stolen_ptr = rm_mult_objs_from_inven(dude_obj, money_ptr, money_stolen_quantity);
      add_mult_objs_to_inven(target, money_ptr, money_stolen_ptr);
      if target_returns_goods > 0 then begin
         display_msg(obj_name(target) + modmsg(msg_return_stolen_and_takes));
      end
      else begin
         display_msg(obj_name(target) + modmsg(msg_from_cash));
      end
   end
   //The pickpocket's target takes a random item from player as compensation for moral damages.
   else begin
      inv_count = inven_count(dude_obj);
      for (i = 0; i < 11; i++) begin
         item_ptr = inven_ptr(dude_obj,random(0,inv_count));
         if (item_ptr == dude_wpn) or (item_ptr == dude_armor) or (item_ptr == dude_right_hand) or (item_ptr == dude_lest_hand) then item_ptr = 0;
      end
      if item_ptr == 0 then begin
         if target_returns_goods <= 0 then begin
            display_msg(obj_name(target) + modmsg(msg_finds_nothing));
         end
         else begin
            display_msg(obj_name(target) + modmsg(msg_takes_back_stolen));
         end
         return;
      end

      if item_ptr > 0 then begin
         item_count = obj_is_carrying_obj(dude_obj, item_ptr);
         if item_count > 1 then begin
            item_count /= 2;
            item_stolen_quantity = random(1, item_count);
         end
         item_stolen_ptr = rm_mult_objs_from_inven(dude_obj, item_ptr, item_stolen_quantity);
         add_mult_objs_to_inven(target, item_ptr, item_stolen_ptr);
         if target_returns_goods > 0 then begin
            display_msg(obj_name(target) + modmsg(msg_return_and_takes) + obj_name(item_ptr) + modmsg(msg_from_item));
         end
         else begin
            display_msg(obj_name(target) + modmsg(msg_takes) + obj_name(item_ptr) + modmsg(msg_from_item));
         end
      end
   end
end

procedure target_drop_random_item begin
   variable target = anim_tar_obj;
   variable target_tile = tile_num(target);
   variable target_elevation = elevation(target);
   variable money_ptr = obj_carrying_pid_obj(target, PID_BOTTLE_CAPS);
   variable money_count = obj_is_carrying_obj(target, money_ptr);
   variable money_stolen_ptr;
   variable money_stolen_quantity;
   variable inv_count;
   variable item_ptr;
   variable item_ptr_2;
   variable item_ptr_3;

   // The pickpocket's target gives a certain amount of his money as compensation for moral damage.
   if money_count >= 20 then begin
      money_stolen_quantity = random(1, money_count);
      if money_stolen_quantity > money_count then money_stolen_quantity = money_count;
      money_stolen_ptr = rm_mult_objs_from_inven(target, money_ptr, money_stolen_quantity);
      add_mult_objs_to_inven(dude_obj, money_ptr, money_stolen_ptr);
      // gives you his/her valuables!
      if (get_critter_stat(target,STAT_gender)) <= GENDER_MALE then begin
         display_msg(obj_name(target) + modmsg(msg_gives_valuables_his));
      end
      else begin
         display_msg(obj_name(target) + modmsg(msg_gives_valuables_her));
      end
   end
   // The pickpocket's target gives an item compensation for moral damage.
   else begin
      inven_unwield(target);
      inv_count = inven_count(target) - 1;
      item_ptr = inven_ptr(target,random(0,inv_count));
      if item_ptr > 0 then begin
         rm_obj_from_inven(target, item_ptr);
         move_to(item_ptr, target_tile, target_elevation);
      end

      item_ptr_2 = inven_ptr(target,random(0,inv_count));
      if item_ptr_2 > 0 then begin
         rm_obj_from_inven(target, item_ptr_2);
         move_to(item_ptr_2, target_tile, target_elevation);
      end

      item_ptr_3 = inven_ptr(target,random(0,inv_count));
      if item_ptr_3 > 0 andAlso random(0,1) then begin
         rm_obj_from_inven(target, item_ptr_3);
         move_to(item_ptr_3, target_tile, target_elevation);
      end

      if (item_ptr > 0) or (item_ptr_2 > 0) or (item_ptr_3 > 0) then begin
         display_msg(obj_name(target) + modmsg(msg_puts_some));
      end
      else begin
         display_msg(obj_name(target) + modmsg(msg_puts_some_pretend));
      end
   end

end

procedure kill_the_target_fall_front_blood begin
   set_global_var(GVAR_PLAYER_REPUTATION,(global_var(GVAR_PLAYER_REPUTATION) - 30));
   kill_critter(anim_tar_obj, ANIM_fall_back_blood_sf);
   call clear_gvars();
   reg_anim_end();
end

procedure kill_the_target_fall_back_blood begin
   set_global_var(GVAR_PLAYER_REPUTATION,(global_var(GVAR_PLAYER_REPUTATION) - 30));
   kill_critter(anim_tar_obj, ANIM_fall_back_blood_sf);
   call clear_gvars();
   reg_anim_end();
end

procedure kill_the_target_big_hole begin
   kill_critter(anim_tar_obj, ANIM_big_hole_sf);
   set_global_var(GVAR_PLAYER_REPUTATION,(global_var(GVAR_PLAYER_REPUTATION) - 30));
   call clear_gvars();
   reg_anim_end();
end

procedure callback_dmg_the_target_all_hp_dmg begin
   variable dmg = get_critter_stat(anim_tar_obj,STAT_current_hp);
   if dmg == 1 then begin
      display_msg(Obj_name(anim_tar_obj)+modmsg(msg_was_hit)+dmg+modmsg(msg_hit_point));
   end
   else begin
      display_msg(Obj_name(anim_tar_obj)+modmsg(msg_was_hit)+dmg+modmsg(msg_hit_points));
   end
end

procedure callback_dmg_the_dude_0_dmg begin
   display_msg(modmsg(msg_you_were_hit_for_0));
end

procedure kill_the_dude_fall_back_blood begin
   kill_critter(dude_obj, ANIM_fall_back_blood_sf);
   call clear_gvars();
   reg_anim_end();
end

procedure enable_ui begin
   game_ui_enable;
   remove_timer_event(5);
end

procedure dude_is_dying begin
   dude_will_die = 1;
   reg_anim_clear(anim_tar_obj);
   reg_anim_begin();
   reg_anim_play_sfx(anim_tar_obj,sfx_build_char_name(anim_tar_obj,ANIM_throw_punch,snd_weapon_attack),-1);
   reg_anim_animate(anim_tar_obj, ANIM_throw_punch, 0);
   reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back,snd_contact),2);
   reg_anim_animate(dude_obj, ANIM_fall_back, 0);
   reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back_blood,snd_contact),-1);
   reg_anim_animate(dude_obj, ANIM_fall_back_blood, 0);
   reg_anim_callback(enable_ui);
   reg_anim_callback(kill_the_dude_fall_back_blood);
   reg_anim_end();
end

procedure callback_dmg_the_dude begin
   variable dude_max_hp = get_critter_stat(dude_obj, STAT_max_hp) / 5;
   variable dude_cur_hp = get_critter_stat(dude_obj, STAT_current_hp);
   variable dude_dt = get_critter_stat(dude_obj, STAT_dmg_thresh);
   variable dude_dr = get_critter_stat(dude_obj, STAT_dmg_resist);
   variable dmg = round((random(4, 10) + anim_tar_melee_dmg - (dude_dt / 2)) * (100 - (dude_dr / 2)) / 100.0);
   if dmg < 1 then begin
      if anim_tar_kill_type != KILL_TYPE_super_mutant_kills andAlso not(military_fid(critter_art_fid(anim_tar_obj))) andAlso not(power_armor_fid(critter_art_fid(anim_tar_obj))) then begin
         dmg = 0;
      end
      else begin
         dmg = random(3,6);
      end
   end
   if dmg > dude_max_hp then dmg = dude_max_hp;
   if dmg >= dude_cur_hp then begin
      call dude_is_dying();
   end
   else begin
      critter_heal(dude_obj, -dmg);
      if dmg == 1 then begin
         display_msg(modmsg(msg_you_were_head_hit_for)+dmg+modmsg(msg_hit_point));
      end
      else begin
         display_msg(modmsg(msg_you_were_head_hit_for)+dmg+modmsg(msg_hit_points));
      end
   end
end

procedure callback_dmg_the_dude_child begin
   variable dude_max_hp = get_critter_stat(dude_obj, STAT_max_hp) / 6;
   variable dude_cur_hp = get_critter_stat(dude_obj, STAT_current_hp);
   variable dude_dt = get_critter_stat(dude_obj, STAT_dmg_thresh);
   variable dude_dr = get_critter_stat(dude_obj, STAT_dmg_resist);
   variable dmg = round((random(1, (3 + anim_tar_melee_dmg))  - dude_dt ) * (100 - dude_dr) / 100.0);
   if dmg < 1 then begin
      if anim_tar_kill_type != KILL_TYPE_super_mutant_kills andAlso not(military_fid(critter_art_fid(anim_tar_obj))) andAlso not(power_armor_fid(critter_art_fid(anim_tar_obj))) then begin
         dmg = 0;
      end
      else begin
         dmg = random(1,3);
      end
   end
   if dmg > dude_max_hp then dmg = dude_max_hp;
   if dmg >= dude_cur_hp then begin
      call dude_is_dying();
   end
   else begin
      critter_heal(dude_obj, -dmg);
      if dmg == 1 then begin
         display_msg(modmsg(msg_you_were_head_hit_for)+dmg+modmsg(msg_hit_point));
      end
      else begin
         display_msg(modmsg(msg_you_were_head_hit_for)+dmg+modmsg(msg_hit_points));
      end
   end
end

procedure callback_dmg_the_dude_critically begin
   variable dude_max_hp = get_critter_stat(dude_obj, STAT_max_hp) / 4;
   variable dude_cur_hp = get_critter_stat(dude_obj, STAT_current_hp);
   variable dude_dt = get_critter_stat(dude_obj, STAT_dmg_thresh);
   variable dude_dr = get_critter_stat(dude_obj, STAT_dmg_resist);
   variable dmg = round((random(9, 18) + anim_tar_melee_dmg - (dude_dt / 5)) * (100 - (dude_dr / 5)) / 100.0);
   if dmg < 1 then begin
      if anim_tar_kill_type != KILL_TYPE_super_mutant_kills andAlso not(military_fid(critter_art_fid(anim_tar_obj))) andAlso not(power_armor_fid(critter_art_fid(anim_tar_obj))) then begin
         dmg = 0;
      end
      else begin
         dmg = random(5,9);
      end
   end
   if dmg > dude_max_hp then dmg = dude_max_hp;
   if dmg >= dude_cur_hp then begin
      call dude_is_dying();
   end
   else begin
      critter_heal(dude_obj, -dmg);
      if dmg == 1 then begin
         display_msg(modmsg(msg_you_were_head_hit_for)+dmg+modmsg(msg_hit_point));
      end
      else begin
         display_msg(modmsg(msg_you_were_head_hit_for)+dmg+modmsg(msg_hit_points));
      end
   end
end

procedure disable_ui begin
   game_ui_disable;
   remove_timer_event(5);
   add_global_timer_event(game_ticks(16),5);
end

procedure disable_ui_15 begin
   game_ui_disable;
   remove_timer_event(5);
   add_global_timer_event(game_ticks(16),5);
end

procedure ANIM_target_aim_at_dude(variable caught_count) begin
   variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   variable dude_hex = tile_num(dude_obj);
   variable dude_rot_to_tar = rotation_to_tile(dude_hex, tar_hex);
   variable target_fid = obj_art_fid(target);
   variable target_proto_fid = critter_art_fid(target);
   variable dude_ac = get_critter_stat(dude_obj, STAT_ac);
   variable dodger_perk = has_trait(TRAIT_PERK, dude_obj, PERK_dodger) + has_trait(TRAIT_PERK, dude_obj, PERK_hth_evade_perk);
   variable stonewall_perk = has_trait(TRAIT_PERK, dude_obj, PERK_stonewall_perk);
   variable power_armor = player_wearing_power_armor;
   variable roll = (99 + (50 * power_armor) + 75 * stonewall_perk);
   variable behind_dude_hex;
   variable before_dude_hex;
   variable path_arr_len;
   variable arr_key;
   variable arr_len_stole = len_array(stolen_items_ptr_arr);
   variable put_away;
   behind_dude_hex = tile_num_in_direction(dude_hex,((dude_rot_to_tar+3) % 6), 2);
   path_arr_len = len_array(path_find_to(dude_obj,behind_dude_hex,BLOCKING_TYPE_BLOCK));
   if path_arr_len < 0 or path_arr_len > 2 or obj_blocking_tile(behind_dude_hex,elevation(dude_obj),BLOCKING_TYPE_BLOCK) then begin
      behind_dude_hex = tile_num_in_direction(dude_hex,((dude_rot_to_tar+3) % 6), 1);
      if obj_blocking_tile(behind_dude_hex,elevation(dude_obj),BLOCKING_TYPE_BLOCK) then begin
         behind_dude_hex = dude_hex;
      end
   end
   before_dude_hex = tile_num_in_direction(behind_dude_hex,dude_rot_to_tar, 1);
   tile_to_pickup = before_dude_hex;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui_15);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_animate(target, ANIM_point, -1);
      reg_anim_callback(callback_show_float_msg_aiming);
      reg_anim_animate(dude_obj, ANIM_stand, -1);
      reg_anim_obj_move_to_tile(dude_obj, behind_dude_hex, -1);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      reg_anim_animate(dude_obj, ANIM_stand, -1);
      reg_anim_turn_towards(dude_obj, tile_to_pickup, -1);
      reg_anim_animate(dude_obj, ANIM_magic_hands_ground, -1);
      reg_anim_callback(callback_put_on_tile_all_stolen_items);
      reg_anim_animate(target, ANIM_unpoint, -1);
      reg_anim_obj_move_to_tile(target, dude_hex, -1);
      reg_anim_turn_towards(target, behind_dude_hex, -1);
      reg_anim_animate(target, ANIM_magic_hands_ground, -1);
      reg_anim_callback(callback_pickup_all_on_tile);
      reg_anim_turn_towards(target, behind_dude_hex, -1);
      if caught_count <= 0 then begin

         reg_anim_obj_move_to_tile(target, anim_tar_tile, -1);
         reg_anim_turn_towards(target, behind_dude_hex, -1);
         reg_anim_animate(target, ANIM_stand, -1);
         reg_anim_animate(target, ANIM_point, -1);
         reg_anim_callback(callback_show_float_msg_unaiming_normal);
         reg_anim_turn_towards(dude_obj, tar_hex, -1);
         reg_anim_animate(dude_obj, ANIM_stand, -1);
         reg_anim_turn_towards(dude_obj, tar_hex, -1);
         reg_anim_animate(dude_obj, ANIM_stand, -1);
         reg_anim_turn_towards(dude_obj, tar_hex, -1);
         reg_anim_animate(target, ANIM_unpoint, -1);
         reg_anim_turn_towards(target, behind_dude_hex, -1);
         reg_anim_callback(callback_add_timed_event_TURN_BACK);
      end
      else begin
         //free
         if not(random(0,5)) then begin
            reg_anim_obj_move_to_tile(target, anim_tar_tile, -1);
            reg_anim_turn_towards(target, behind_dude_hex, -1);
            reg_anim_animate(target, ANIM_stand, -1);
            reg_anim_animate(target, ANIM_point, -1);
            reg_anim_callback(callback_show_float_msg_unaiming_aggresive);
            reg_anim_turn_towards(dude_obj, tar_hex, -1);
            reg_anim_animate(dude_obj, ANIM_stand, -1);
            reg_anim_turn_towards(dude_obj, tar_hex, -1);
            reg_anim_animate(dude_obj, ANIM_stand, -1);
            reg_anim_turn_towards(dude_obj, tar_hex, -1);
            reg_anim_animate(target, ANIM_unpoint, -1);
            reg_anim_turn_towards(target, behind_dude_hex, -1);
            reg_anim_callback(callback_add_timed_event_ATTACK_DUDE_ON_SIGHT);
         end
         //hit and rob
         else begin
            reg_anim_turn_towards(target, behind_dude_hex, -1);
            if anim_tar_weapon > 0 then begin
               if art_exists_basic_anim(target,ANIM_put_away) then begin
                  put_away = 1;
                  reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_put_away,snd_weapon_out),-1);
                  reg_anim_animate(target, ANIM_put_away, 0);
                  reg_anim_change_fid(target, target_proto_fid, -1);
               end
            end
            reg_anim_animate(target, ANIM_stand, -1);
            reg_anim_obj_move_to_tile(target, behind_dude_hex, -1);
            reg_anim_turn_towards(target, behind_dude_hex, -1);
            // check first attack
            if anim_tar_unarmed_skill < random(0,(100 + dude_ac + (25 * dodger_perk))) then begin
               // anim dodge
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
               reg_anim_turn_towards(dude_obj, tile_num(target), 0);
               reg_anim_animate(target, ANIM_throw_punch, 0);
               reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_human),2);
               reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
               reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
            end
            //else  dude get hit
            else begin
               //anim critical hit and KO
               if random(0,roll) <= 75 then begin
                  dude_was_robbed = 1;
                  reg_anim_turn_towards(target, behind_dude_hex, -1);
                  reg_anim_callback(callback_dmg_the_dude_critically);
                  reg_anim_animate(target, ANIM_throw_punch, 0);
                  reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
                  reg_anim_animate(dude_obj, ANIM_fall_back, 3);
                  reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back,snd_knock_down),0);
                  if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
                     reg_anim_animate(target, ANIM_magic_hands_ground, -1);
                  end
                  reg_anim_callback(callback_rob_the_dude);
                  reg_anim_animate(target, ANIM_stand, -1);
                  reg_anim_turn_towards(target, behind_dude_hex, -1);
                  reg_anim_animate(dude_obj, ANIM_back_to_standing, -1);
                  reg_anim_turn_towards(dude_obj, target, -1);
               end
               //anim hit/critical hit without KO
               else begin
                  //crit or hit
                  if random(0,3) then begin
                     reg_anim_callback(callback_dmg_the_dude);
                  end
                  else begin
                     reg_anim_callback(callback_dmg_the_dude_critically);
                  end
                  reg_anim_turn_towards(target, behind_dude_hex, -1);
                  reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
                  reg_anim_turn_towards(dude_obj, tar_hex, 0);
                  reg_anim_animate(target, ANIM_throw_punch, 0);
                  reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_hit_from_front,snd_contact),2);
                  reg_anim_animate(dude_obj, ANIM_hit_from_front, 2);
                  reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
               end
            end
            reg_anim_turn_towards(dude_obj, tar_hex, 0);
            reg_anim_callback(callback_show_float_msg_death_threat);
            if put_away > 0 then begin
               reg_anim_change_fid(target, target_fid, -1);
               if anim_tar_weapon_anim > 0 andAlso art_exists_basic_anim(target,ANIM_take_out) then begin
                  reg_anim_take_out(target, anim_tar_weapon_anim, -1);
                  reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_take_out,snd_weapon_out),0);
               end
            end
            reg_anim_animate(target, ANIM_stand, -1);
            reg_anim_callback(callback_add_timed_event_ATTACK_DUDE_ON_SIGHT);
         end
      end
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_dude_is_attacked_by_human(variable crit_chance) begin
   variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   variable target_fid = obj_art_fid(target);
   variable target_proto_fid = critter_art_fid(target);
   variable dude_hex = tile_num(dude_obj);
   variable dude_ac = get_critter_stat(dude_obj, STAT_ac);
   variable dodger_perk = has_trait(TRAIT_PERK, dude_obj, PERK_dodger) + has_trait(TRAIT_PERK, dude_obj, PERK_hth_evade_perk);
   variable stonewall_perk = has_trait(TRAIT_PERK, dude_obj, PERK_stonewall_perk);
   variable before_dude_hex = tile_num_in_direction(dude_hex,rotation_to_tile(dude_hex,tar_hex), 1);
   variable power_armor = player_wearing_power_armor;
   variable arr_key;
   variable roll = (99 + (50 * power_armor) + 75 * stonewall_perk);
   variable dude_got_hit;
   variable return_items;
   variable arr_len_stole = len_array(stolen_items_ptr_arr);
   variable put_away;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui_15);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_callback(show_float_msg_tough_response);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      if anim_tar_weapon > 0 then begin
         if art_exists_basic_anim(target,ANIM_put_away) then begin
            put_away = 1;
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_put_away,snd_weapon_ready),-1);
            reg_anim_animate(target, ANIM_put_away, 0);
            reg_anim_change_fid(target, target_proto_fid, -1);
         end
      end
      reg_anim_animate(target, ANIM_stand, -1);
      reg_anim_obj_move_to_tile(target, before_dude_hex, -1);
      reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      // check first attack
      if anim_tar_unarmed_skill < random(0,(90 + dude_ac + (25 * dodger_perk))) then begin
         // anim dodge
         dude_got_hit = 0;
         reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
         reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
         reg_anim_animate(target, ANIM_throw_punch, 0);
         reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_human),2);
         reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
         reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      end
      //else  dude get hit
      else begin
         dude_got_hit = 1;
         //anim critical hit and KO
         if random(0,roll) <= crit_chance then begin
            dude_was_robbed = 1;
            return_items = 1;
            arr_len_stole = -1;
            reg_anim_callback(callback_dmg_the_dude_critically);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
            reg_anim_animate(dude_obj, ANIM_fall_back, 3);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back,snd_knock_down),0);
            reg_anim_callback(callback_target_returns_its_stolen_items_ALL);
            if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
               reg_anim_animate(target, ANIM_magic_hands_ground, -1);
            end
            reg_anim_callback(callback_rob_the_dude);
            reg_anim_animate(target, ANIM_stand, -1);
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_animate(dude_obj, ANIM_back_to_standing, -1);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
         //anim hit/critical hit without KO
         else begin
            //crit or hit
            return_items = 1;
            if random(0,3) then begin
               reg_anim_callback(callback_dmg_the_dude);
            end
            else begin
               reg_anim_callback(callback_dmg_the_dude_critically);
            end
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
            reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_hit_from_front,snd_contact),2);
            reg_anim_animate(dude_obj, ANIM_hit_from_front, 2);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
            if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) andAlso arr_len_stole > 0 then begin
               reg_anim_animate(target, ANIM_magic_hands_middle, -1);
            end
            if arr_len_stole > 0 then begin
               reg_anim_callback(callback_target_returns_its_stolen_items);
               arr_len_stole = -1;
            end
         end
      end
      if return_items <= 0 then begin
            // anim dodge
         dude_got_hit = 0;
         if anim_tar_unarmed_skill < random(0,(90 + (25 * dodger_perk))) then begin
            dude_got_hit = 0;
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
            reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_human),2);
            reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
         // dude get hit
         else begin
            dude_got_hit = 1;
            //anim critical hit and KO
            if random(0,roll) <= crit_chance then begin
               return_items = 1;
               dude_was_robbed = 1;
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_callback(callback_dmg_the_dude_critically);
               reg_anim_animate(target, ANIM_throw_punch, 0);
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
               reg_anim_animate(dude_obj, ANIM_fall_back, 3);
               reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back,snd_knock_down),0);
               if arr_len_stole > 0 then begin
                  reg_anim_callback(callback_target_returns_its_stolen_items_ALL);
                  arr_len_stole = -1;
               end
               if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
                  reg_anim_animate(target, ANIM_magic_hands_ground, -1);
               end
               reg_anim_callback(callback_rob_the_dude);
               reg_anim_animate(target, ANIM_stand, -1);
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_animate(dude_obj, ANIM_back_to_standing, -1);
               reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
            end
            //anim critical hit without KO
            else begin
               //crit or hit
               return_items = 1;
               if random(0,3) then begin
                  reg_anim_callback(callback_dmg_the_dude);
               end
               else begin
                  reg_anim_callback(callback_dmg_the_dude_critically);
               end
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),-1);
               reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
               reg_anim_animate(target, ANIM_throw_punch, 0);
               reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_hit_from_front,snd_contact),2);
               reg_anim_animate(dude_obj, ANIM_hit_from_front, 2);
               reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
               if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) andAlso arr_len_stole > 0 then begin
                  if arr_len_stole > 0 then reg_anim_animate(target, ANIM_magic_hands_middle, -1);
               end
               if arr_len_stole > 0 then begin
                  reg_anim_callback(callback_target_returns_its_stolen_items);
                  arr_len_stole = -1;
               end
            end
         end
      end
      if arr_len_stole > 0 andAlso random(0,5) then begin
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) then begin
            reg_anim_animate(target, ANIM_magic_hands_middle, -1);
         end
         reg_anim_callback(callback_target_returns_its_stolen_items);
         arr_len_stole = -1;
      end
      if dude_got_hit <= 0 then begin
         reg_anim_callback(callback_show_float_msg_death_threat);
         reg_anim_callback(callback_add_timed_event_ATTACK_DUDE_ON_SIGHT);
      end
      else begin
         reg_anim_callback(callback_show_float_msg_name_calling);
         reg_anim_animate(target, ANIM_stand, -1);
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_callback(callback_add_timed_event_TURN_BACK);
      end
      if put_away > 0 then begin
         reg_anim_change_fid(target, target_fid, -1);
         if anim_tar_weapon_anim > 0 andAlso art_exists_basic_anim(target,ANIM_take_out) then begin
            reg_anim_take_out(target, anim_tar_weapon_anim, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_take_out,snd_weapon_out),0);
         end
      end
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end


procedure ANIM_dude_is_attacked_by_human_was_caught_before(variable crit_chance) begin
      variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   variable target_fid = obj_art_fid(target);
   variable target_proto_fid = critter_art_fid(target);
   variable dude_hex = tile_num(dude_obj);
   variable dude_ac = get_critter_stat(dude_obj, STAT_ac);
   variable dodger_perk = has_trait(TRAIT_PERK, dude_obj, PERK_dodger) + has_trait(TRAIT_PERK, dude_obj, PERK_hth_evade_perk);
   variable stonewall_perk = has_trait(TRAIT_PERK, dude_obj, PERK_stonewall_perk);
   variable before_dude_hex = tile_num_in_direction(dude_hex,rotation_to_tile(dude_hex,tar_hex), 1);
   variable power_armor = player_wearing_power_armor;
   variable arr_key;
   variable roll = (99 + (50 * power_armor) + 75 * stonewall_perk);
   variable dude_got_hit;
   variable return_items;
   variable arr_len_stole = len_array(stolen_items_ptr_arr);
   variable put_away;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui_15);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_callback(show_float_msg_tough_response);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      if anim_tar_weapon > 0 then begin
         if art_exists_basic_anim(target,ANIM_put_away) then begin
            put_away = 1;
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_put_away,snd_weapon_ready),-1);
            reg_anim_animate(target, ANIM_put_away, 0);
            reg_anim_change_fid(target, target_proto_fid, -1);
         end
      end
      reg_anim_animate(target, ANIM_stand, -1);
      reg_anim_obj_move_to_tile(target, before_dude_hex, -1);
      reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      // check first attack
      if anim_tar_unarmed_skill < random(0,(100 + dude_ac + (25 * dodger_perk))) then begin
         // anim dodge
         dude_got_hit = 0;
         reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
         reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
         reg_anim_animate(target, ANIM_throw_punch, 0);
         reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_human),2);
         reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
         reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      end
      //else  dude get hit
      else begin
         dude_got_hit = 1;
         //anim critical hit and KO
         if random(0,roll) <= crit_chance then begin
            dude_was_robbed = 1;
            return_items = 1;
            arr_len_stole = -1;
            reg_anim_callback(callback_dmg_the_dude_critically);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
            reg_anim_animate(dude_obj, ANIM_fall_back, 3);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back,snd_knock_down),0);
            reg_anim_callback(callback_target_returns_its_stolen_items_ALL);
            if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
               reg_anim_animate(target, ANIM_magic_hands_ground, -1);
            end
            reg_anim_callback(callback_rob_the_dude);
            reg_anim_animate(target, ANIM_stand, -1);
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_animate(dude_obj, ANIM_back_to_standing, -1);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
         //anim hit/critical hit without KO
         else begin
            //crit or hit
            //return_items = 1;
            if random(0,3) then begin
               reg_anim_callback(callback_dmg_the_dude);
            end
            else begin
               reg_anim_callback(callback_dmg_the_dude_critically);
            end
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
            reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_hit_from_front,snd_contact),2);
            reg_anim_animate(dude_obj, ANIM_hit_from_front, 2);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
            //if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) andAlso arr_len_stole > 0 then begin
               //reg_anim_animate(target, ANIM_magic_hands_middle, -1);
            //end
            //if arr_len_stole > 0 then begin
               //reg_anim_callback(callback_target_returns_its_stolen_items);
               //arr_len_stole = -1;
            //end
         end
      end
      if dude_was_robbed <= 0 then begin
            // anim dodge
         dude_got_hit = 0;
         if anim_tar_unarmed_skill < random(0,(100 + (25 * dodger_perk))) then begin
            dude_got_hit = 0;
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
            reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_human),2);
            reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
         // dude get hit
         else begin
            dude_got_hit = 1;
            //anim critical hit and KO
            if random(0,roll) <= crit_chance then begin
               return_items = 1;
               dude_was_robbed = 1;
               arr_len_stole = -1;
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_callback(callback_dmg_the_dude_critically);
               reg_anim_animate(target, ANIM_throw_punch, 0);
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
               reg_anim_animate(dude_obj, ANIM_fall_back, 3);
               reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back,snd_knock_down),0);
               if arr_len_stole > 0 then begin
                  reg_anim_callback(callback_target_returns_its_stolen_items_ALL);
                  arr_len_stole = -1;
               end
               if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
                  reg_anim_animate(target, ANIM_magic_hands_ground, -1);
               end
               reg_anim_callback(callback_rob_the_dude);
               reg_anim_animate(target, ANIM_stand, -1);
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_animate(dude_obj, ANIM_back_to_standing, -1);
               reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
            end
            //anim critical hit without KO
            else begin
               //crit or hit
               return_items = 1;
               if random(0,3) then begin
                  reg_anim_callback(callback_dmg_the_dude);
               end
               else begin
                  reg_anim_callback(callback_dmg_the_dude_critically);
               end
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),-1);
               reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
               reg_anim_animate(target, ANIM_throw_punch, 0);
               reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_hit_from_front,snd_contact),2);
               reg_anim_animate(dude_obj, ANIM_hit_from_front, 2);
               reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
               if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) andAlso arr_len_stole > 0 then begin
                  if arr_len_stole > 0 then reg_anim_animate(target, ANIM_magic_hands_middle, -1);
               end
               if arr_len_stole > 0 then begin
                  reg_anim_callback(callback_target_returns_its_stolen_items);
                  arr_len_stole = -1;
               end
            end
         end
      end
      if arr_len_stole > 0 then begin
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) then begin
            reg_anim_animate(target, ANIM_magic_hands_middle, -1);
         end
         reg_anim_callback(callback_target_returns_its_stolen_items);
         arr_len_stole = -1;
      end
      if dude_got_hit <= 0 then begin
         reg_anim_callback(callback_show_float_msg_death_threat);
         reg_anim_callback(callback_add_timed_event_ATTACK_DUDE_ON_SIGHT);
      end
      else begin
         reg_anim_callback(callback_show_float_msg_name_calling);
         reg_anim_animate(target, ANIM_stand, -1);
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_callback(callback_add_timed_event_TURN_BACK);
      end
      if put_away > 0 then begin
         reg_anim_change_fid(target, target_fid, -1);
         if anim_tar_weapon_anim > 0 andAlso art_exists_basic_anim(target,ANIM_take_out) then begin
            reg_anim_take_out(target, anim_tar_weapon_anim, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_take_out,snd_weapon_out),0);
         end
      end
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_dude_is_attacked_by_supermutant(variable crit_chance) begin
   variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   variable target_fid = obj_art_fid(target);
   variable target_proto_fid = critter_art_fid(target);
   variable dude_hex = tile_num(dude_obj);
   variable dude_ac = get_critter_stat(dude_obj, STAT_ac);
   variable dodger_perk = has_trait(TRAIT_PERK, dude_obj, PERK_dodger) + has_trait(TRAIT_PERK, dude_obj, PERK_hth_evade_perk);
   variable stonewall_perk = has_trait(TRAIT_PERK, dude_obj, PERK_stonewall_perk);
   variable power_armor = player_wearing_power_armor;
   variable before_dude_hex = tile_num_in_direction(dude_hex,rotation_to_tile(dude_hex,tar_hex), 1);
   variable arr_key;
   variable roll = (99 + (50 * power_armor) + 75 * stonewall_perk);
   variable dude_got_hit;
   variable return_items;
   variable arr_len_stole = len_array(stolen_items_ptr_arr);
   variable put_away;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui_15);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      reg_anim_callback(show_float_msg_tough_response);
      if anim_tar_weapon > 0 then begin
         if art_exists_basic_anim(target,ANIM_put_away) then begin
            put_away = 1;
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_put_away,snd_weapon_ready),-1);
            reg_anim_animate(target, ANIM_put_away, 0);
            reg_anim_change_fid(target, target_proto_fid, -1);
         end
      end
      reg_anim_animate(target, ANIM_stand, -1);
      reg_anim_obj_move_to_tile(target, before_dude_hex, -1);
      reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      // check first attack
      if anim_tar_unarmed_skill < random(0,(100 + dude_ac + (25 * dodger_perk))) then begin
         // anim dodge
         dude_got_hit = 0;
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
         reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
         reg_anim_animate(target, ANIM_throw_punch, 0);
         reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_human),2);
         reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
         reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      end
      //else  dude get hit
      else begin
         dude_got_hit = 1;
         //anim critical hit and KO
         if random(0,roll) <= crit_chance then begin
            dude_was_robbed = 1;
            return_items = 1;
            arr_len_stole = -1;
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_callback(callback_dmg_the_dude_critically);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
            reg_anim_animate(dude_obj, ANIM_fall_back, 3);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back,snd_knock_down),0);
            reg_anim_callback(callback_target_returns_its_stolen_items_ALL);
            if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
               reg_anim_animate(target, ANIM_magic_hands_ground, -1);
            end
            reg_anim_callback(callback_rob_the_dude);
            reg_anim_animate(target, ANIM_stand, -1);
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_animate(dude_obj, ANIM_back_to_standing, -1);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
         //anim hit/critical hit without KO
         else begin
            //crit or hit
            return_items = 1;
            if random(0,3) then begin
               reg_anim_callback(callback_dmg_the_dude);
            end
            else begin
               reg_anim_callback(callback_dmg_the_dude_critically);
            end
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
            reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_hit_from_front,snd_contact),2);
            reg_anim_animate(dude_obj, ANIM_hit_from_front, 2);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
            if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) andAlso arr_len_stole > 0 then begin
               reg_anim_animate(target, ANIM_magic_hands_middle, -1);
            end
            if arr_len_stole > 0 then begin
               reg_anim_callback(callback_target_returns_its_stolen_items);
               arr_len_stole = -1;
            end
         end
      end
      if return_items <= 0 then begin
            // anim dodge
         dude_got_hit = 0;
         if anim_tar_unarmed_skill < random(0,(100 + (25 * dodger_perk))) then begin
            dude_got_hit = 0;
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
            reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_human),2);
            reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
         // dude get hit
         else begin
            dude_got_hit = 1;
            //anim critical hit and KO
            if random(0,roll) <= crit_chance then begin
               dude_was_robbed = 1;
               arr_len_stole = -1;
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_callback(callback_dmg_the_dude_critically);
               reg_anim_animate(target, ANIM_throw_punch, 0);
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
               reg_anim_animate(dude_obj, ANIM_fall_back, 3);
               reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back,snd_knock_down),0);
               if arr_len_stole > 0 then begin
                  reg_anim_callback(callback_target_returns_its_stolen_items_ALL);
                  arr_len_stole = -1;
               end
               if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
                  reg_anim_animate(target, ANIM_magic_hands_ground, -1);
               end
               reg_anim_callback(callback_rob_the_dude);
               reg_anim_animate(target, ANIM_stand, -1);
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_animate(dude_obj, ANIM_back_to_standing, -1);
               reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
            end
            //anim critical hit without KO
            else begin
               //crit or hit
               if random(0,3) then begin
                  reg_anim_callback(callback_dmg_the_dude);
               end
               else begin
                  reg_anim_callback(callback_dmg_the_dude_critically);
               end
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
               reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
               reg_anim_animate(target, ANIM_throw_punch, 0);
               reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_hit_from_front,snd_contact),2);
               reg_anim_animate(dude_obj, ANIM_hit_from_front, 2);
               reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
               // ADD NEW MSG!
               //reg_anim_callback(show_float_msg_angry_items_return);
               if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) andAlso arr_len_stole > 0 then begin
                  if arr_len_stole > 0 then reg_anim_animate(target, ANIM_magic_hands_middle, -1);
               end
               if arr_len_stole > 0 then begin
                  reg_anim_callback(callback_target_returns_its_stolen_items);
                  arr_len_stole = -1;
               end
            end
         end
      end
      if arr_len_stole > 0 andAlso random(0,10) then begin
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) then begin
            reg_anim_animate(target, ANIM_magic_hands_middle, -1);
         end
         reg_anim_callback(callback_target_returns_its_stolen_items);
         arr_len_stole = -1;
      end
      if dude_got_hit <= 0 then begin
         reg_anim_callback(callback_show_float_msg_death_threat);
         reg_anim_callback(callback_add_timed_event_ATTACK_DUDE_ON_SIGHT);
      end
      else begin
         reg_anim_callback(callback_show_float_msg_name_calling);
         reg_anim_animate(target, ANIM_stand, -1);
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_callback(callback_add_timed_event_TURN_BACK);
      end
      if put_away > 0 then begin
         reg_anim_change_fid(target, target_fid, -1);
         if anim_tar_weapon_anim > 0 andAlso art_exists_basic_anim(target,ANIM_take_out) then begin
            reg_anim_take_out(target, anim_tar_weapon_anim, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_take_out,snd_weapon_out),0);
         end
      end
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_dude_is_attacked_by_supermutant_was_caught_before(variable crit_chance) begin
   variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   variable target_fid = obj_art_fid(target);
   variable target_proto_fid = critter_art_fid(target);
   variable dude_hex = tile_num(dude_obj);
   variable dude_ac = get_critter_stat(dude_obj, STAT_ac);
   variable dodger_perk = has_trait(TRAIT_PERK, dude_obj, PERK_dodger) + has_trait(TRAIT_PERK, dude_obj, PERK_hth_evade_perk);
   variable stonewall_perk = has_trait(TRAIT_PERK, dude_obj, PERK_stonewall_perk);
   variable power_armor = player_wearing_power_armor;
   variable before_dude_hex = tile_num_in_direction(dude_hex,rotation_to_tile(dude_hex,tar_hex), 1);
   variable arr_key;
   variable roll = (99 + (50 * power_armor) + 75 * stonewall_perk);
   variable dude_got_hit;
   variable return_items;
   variable arr_len_stole = len_array(stolen_items_ptr_arr);
   variable put_away;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui_15);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      reg_anim_callback(show_float_msg_tough_response);
      if anim_tar_weapon > 0 then begin
         if art_exists_basic_anim(target,ANIM_put_away) then begin
            put_away = 1;
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_put_away,snd_weapon_ready),-1);
            reg_anim_animate(target, ANIM_put_away, 0);
            reg_anim_change_fid(target, target_proto_fid, -1);
         end
      end
      reg_anim_animate(target, ANIM_stand, -1);
      reg_anim_obj_move_to_tile(target, before_dude_hex, -1);
      reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      // check first attack
      if anim_tar_unarmed_skill < random(0,(90 + dude_ac + (25 * dodger_perk))) then begin
         // anim dodge
         dude_got_hit = 0;
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
         reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
         reg_anim_animate(target, ANIM_throw_punch, 0);
         reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_human),2);
         reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
         reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      end
      //else  dude get hit
      else begin
         dude_got_hit = 1;
         //anim critical hit and KO
         if random(0,roll) <= crit_chance then begin
            dude_was_robbed = 1;
            return_items = 1;
            arr_len_stole = -1;
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_callback(callback_dmg_the_dude_critically);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
            reg_anim_animate(dude_obj, ANIM_fall_back, 3);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back,snd_knock_down),0);
            reg_anim_callback(callback_target_returns_its_stolen_items_ALL);
            if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
               reg_anim_animate(target, ANIM_magic_hands_ground, -1);
            end
            reg_anim_callback(callback_rob_the_dude);
            reg_anim_animate(target, ANIM_stand, -1);
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_animate(dude_obj, ANIM_back_to_standing, -1);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
         //anim hit/critical hit without KO
         else begin
            //crit or hit
            //return_items = 1;
            if random(0,3) then begin
               reg_anim_callback(callback_dmg_the_dude);
            end
            else begin
               reg_anim_callback(callback_dmg_the_dude_critically);
            end
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
            reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_hit_from_front,snd_contact),2);
            reg_anim_animate(dude_obj, ANIM_hit_from_front, 2);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
      end
      if dude_was_robbed <= 0 then begin
            // anim dodge
         dude_got_hit = 0;
         if anim_tar_unarmed_skill < random(0,(90 + (25 * dodger_perk))) then begin
            dude_got_hit = 0;
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
            reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_human),2);
            reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
         // dude get hit
         else begin
            dude_got_hit = 1;
            //anim critical hit and KO
            if random(0,roll) <= crit_chance then begin
               dude_was_robbed = 1;
               return_items = 1;
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_callback(callback_dmg_the_dude_critically);
               reg_anim_animate(target, ANIM_throw_punch, 0);
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
               reg_anim_animate(dude_obj, ANIM_fall_back, 3);
               reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_fall_back,snd_knock_down),0);
               if arr_len_stole > 0 then begin
                  reg_anim_callback(callback_target_returns_its_stolen_items_ALL);
                  arr_len_stole = -1;
               end
               if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
                  reg_anim_animate(target, ANIM_magic_hands_ground, -1);
               end
               reg_anim_callback(callback_rob_the_dude);
               reg_anim_animate(target, ANIM_stand, -1);
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_animate(dude_obj, ANIM_back_to_standing, -1);
               reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
            end
            //anim critical hit without KO
            else begin
               //crit or hit
               return_items = 1;
               if random(0,3) then begin
                  reg_anim_callback(callback_dmg_the_dude);
               end
               else begin
                  reg_anim_callback(callback_dmg_the_dude_critically);
               end
               reg_anim_turn_towards(target, dude_hex, -1);
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),0);
               reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
               reg_anim_animate(target, ANIM_throw_punch, 0);
               reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_hit_from_front,snd_contact),2);
               reg_anim_animate(dude_obj, ANIM_hit_from_front, 2);
               reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
               if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) andAlso arr_len_stole > 0 then begin
                  if arr_len_stole > 0 then reg_anim_animate(target, ANIM_magic_hands_middle, -1);
               end
               if arr_len_stole > 0 then begin
                  reg_anim_callback(callback_target_returns_its_stolen_items);
                  arr_len_stole = -1;
               end
            end
         end
      end
      if arr_len_stole > 0 then begin
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) then begin
            reg_anim_animate(target, ANIM_magic_hands_middle, -1);
         end
         reg_anim_callback(callback_target_returns_its_stolen_items);
         arr_len_stole = -1;
      end
      if dude_got_hit <= 0 then begin
         reg_anim_callback(callback_show_float_msg_death_threat);
         reg_anim_callback(callback_add_timed_event_ATTACK_DUDE_ON_SIGHT);
      end
      else begin
         reg_anim_callback(callback_show_float_msg_name_calling);
         reg_anim_animate(target, ANIM_stand, -1);
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_callback(callback_add_timed_event_TURN_BACK);
      end
      if put_away > 0 then begin
         reg_anim_change_fid(target, target_fid, -1);
         if anim_tar_weapon_anim > 0 andAlso art_exists_basic_anim(target,ANIM_take_out) then begin
            reg_anim_take_out(target, anim_tar_weapon_anim, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_take_out,snd_weapon_out),0);
         end
      end
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_dude_take_0_dmg_and_kills_all_types begin
   variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   //variable target_fid = obj_art_fid(target);
   variable target_proto_fid = critter_art_fid(target);
   variable dude_hex = tile_num(dude_obj);
   variable before_dude_hex = tile_num_in_direction(dude_hex,rotation_to_tile(dude_hex,tar_hex), 1);
   variable arr_key;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      //hide weapon
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui_15);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_callback(callback_show_float_msg_name_calling);
      if anim_tar_weapon > 0 then begin
         if art_exists_basic_anim(target,ANIM_put_away) then begin
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_put_away,snd_weapon_ready),-1);
            reg_anim_animate(target, ANIM_put_away, 0);
            reg_anim_change_fid(target, target_proto_fid, -1);
         end
      end
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      reg_anim_animate(target, ANIM_stand, -1);
      reg_anim_obj_move_to_tile(target, before_dude_hex, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      reg_anim_callback(callback_show_float_msg_name_calling);
      reg_anim_animate(target, ANIM_stand, -1);
      // target punch
      reg_anim_callback(callback_dmg_the_dude_0_dmg);
      reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_contact),-1);
      reg_anim_animate(target, ANIM_throw_punch, 0);
      //
      // reset anim
      reg_anim_callback(callback_show_float_msg_name_calling);
      reg_anim_turn_towards(target, dude_hex, -1);
      //
      reg_anim_callback(callback_dmg_the_dude_0_dmg);
      reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_contact),-1);
      reg_anim_animate(target, ANIM_throw_punch, 0);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_animate(dude_obj, ANIM_stand, -1);
      reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_throw_punch,snd_contact),-1);
      reg_anim_animate(dude_obj, ANIM_throw_punch, 0);
      if art_exists_death_anim(target,ANIM_big_hole) andAlso dude_strength >= 8 then begin
         reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_big_hole,snd_contact),2);
         reg_anim_animate(target, ANIM_big_hole, 0);
         reg_anim_callback(callback_dmg_the_target_all_hp_dmg);
         reg_anim_callback(enable_ui);
         reg_anim_callback(kill_the_target_big_hole);
      end
      else begin
         if art_exists_death_anim(target,ANIM_fall_back) then begin
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_fall_back,snd_contact),2);
            reg_anim_animate(target, ANIM_fall_back, 0);
            if art_exists_death_anim(target,ANIM_fall_back_blood) then begin
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_fall_back_blood,snd_contact),-1);
               reg_anim_animate(target, ANIM_fall_back_blood, 0);
            end
            reg_anim_callback(callback_dmg_the_target_all_hp_dmg);
            reg_anim_callback(enable_ui);
            reg_anim_callback(kill_the_target_fall_back_blood);
         end
         else begin
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_fall_front,snd_contact),2);
            reg_anim_animate(target, ANIM_fall_front, 0);
            if art_exists_death_anim(target,ANIM_fall_front_blood) then begin
               reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_fall_front_blood,snd_contact),-1);
               reg_anim_animate(target, ANIM_fall_front_blood, 0);
            end
            reg_anim_callback(callback_dmg_the_target_all_hp_dmg);
            reg_anim_callback(enable_ui);
            reg_anim_callback(kill_the_target_fall_front_blood);
         end
      end
   end

end

procedure ANIM_rare_case_child begin //neutral float and return stolen items
   variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   variable dude_hex = tile_num(dude_obj);
   variable before_dude_hex = tile_num_in_direction(dude_hex,rotation_to_tile(dude_hex,tar_hex), 1);
   variable arr_key;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      reg_anim_animate(dude_obj, ANIM_stand, 0);
      reg_anim_animate(target, ANIM_stand, -1);
      reg_anim_obj_move_to_tile(target, before_dude_hex, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      reg_anim_callback(callback_show_float_msg_rare_response_child);
      if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) then begin
         reg_anim_animate(target, ANIM_magic_hands_middle, -1);
      end
      reg_anim_callback(callback_target_returns_its_stolen_items);
      reg_anim_callback(callback_add_timed_event_TURN_BACK);
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_rare_case_hit_dude_child begin //neutral float and return stolen items
   variable target = anim_tar_obj;
   variable target_fid = obj_art_fid(target);
   variable target_proto_fid = critter_art_fid(target);
   variable tar_hex = tile_num(target);
   variable dude_hex = tile_num(dude_obj);
   variable before_dude_hex = tile_num_in_direction(dude_hex,rotation_to_tile(dude_hex,tar_hex), 1);
   variable dodger_perk = has_trait(TRAIT_PERK, dude_obj, PERK_dodger);
   variable arr_key;
   variable put_away;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui_15);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      //hide weapon
      if anim_tar_weapon > 0 then begin
         if art_exists_basic_anim(target,ANIM_put_away) then begin
            put_away = 1;
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_put_away,snd_weapon_ready),-1);
            reg_anim_animate(target, ANIM_put_away, 0);
            reg_anim_change_fid(target, target_proto_fid, -1);
         end
      end
      reg_anim_animate(target, ANIM_stand, -1);
      reg_anim_obj_move_to_tile(target, before_dude_hex, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      reg_anim_callback(callback_show_float_msg_rare_response_child);
      if anim_tar_gender == GENDER_MALE then begin
         // dude dodge
         if anim_tar_unarmed_skill < random(0,(100 + (25  * dodger_perk))) then begin
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_human),2);
            reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
         // dude get hit
         else begin
            reg_anim_callback(callback_dmg_the_dude_child);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),-1);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_hit_from_front,snd_human),2);
            reg_anim_animate(dude_obj, ANIM_hit_from_front, 0);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
      end
      if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) then begin
         reg_anim_animate(target, ANIM_magic_hands_middle, -1);
      end
      reg_anim_callback(callback_target_returns_its_stolen_items);
      if put_away > 0 then begin
         reg_anim_change_fid(target, target_fid, -1);
         if anim_tar_weapon_anim > 0 andAlso art_exists_basic_anim(target,ANIM_take_out) then begin
            reg_anim_take_out(target, anim_tar_weapon_anim, -1);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_take_out,snd_weapon_out),0);
         end
      end
      reg_anim_callback(callback_add_timed_event_TURN_BACK);
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_common_case_child begin //neutral float and return stolen items
   variable target = anim_tar_obj;
   variable tar_tile = anim_tar_tile;
   variable dude_hex = tile_num(dude_obj);
   variable arr_key;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_callback(callback_show_float_msg_common_response_child); //done
      reg_anim_animate(target, ANIM_stand, -1);
      reg_anim_animate(dude_obj, ANIM_stand, 0);
      reg_anim_turn_towards(dude_obj, tar_tile, -1);
      reg_anim_callback(callback_add_timed_event_TURN_BACK);
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_neutral_response_all_types begin //neutral float and return stolen items
   variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   variable dude_hex = tile_num(dude_obj);
   variable before_dude_hex = tile_num_in_direction(dude_hex,rotation_to_tile(dude_hex,tar_hex), 1);
   variable arr_key;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_callback(show_float_msg_neutral_response);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      reg_anim_animate(dude_obj, ANIM_stand, -1);
      reg_anim_animate(target, ANIM_stand, 0);
      reg_anim_obj_move_to_tile(target, before_dude_hex, -1);
      reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) then begin
         reg_anim_animate(target, ANIM_magic_hands_middle, -1);
      end
      reg_anim_callback(callback_target_returns_its_stolen_items);
      reg_anim_callback(callback_add_timed_event_TURN_BACK);
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_harmless_response begin //neutral float and return stolen items
   variable target = anim_tar_obj;
   variable tar_tile = anim_tar_tile;
   variable dude_hex = tile_num(dude_obj);
   variable arr_key;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui);
      reg_anim_turn_towards(dude_obj, tar_tile, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_animate(target, ANIM_stand, -1);
      reg_anim_callback(show_float_msg_harmless_frightened_response);
      reg_anim_animate(dude_obj, ANIM_stand, -1);
      reg_anim_turn_towards(target, anim_tar_rot_tile, -1);
      reg_anim_callback(callback_add_timed_event_TURN_BACK);
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_flee_child begin // fleeing and add timed event flee_or_return
   variable target = anim_tar_obj;
   variable dude_hex = tile_num(dude_obj);
   variable tar_hex = tile_num(anim_tar_obj);
   variable tile_1 = get_tile_with_free_path(target);
   variable tar_rot = rotation_to_tile(tar_hex, anim_tar_rot_tile);
   variable tar_rot_to_dude = rotation_to_tile(tar_hex, dude_hex);
   variable arr_key;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui);
      reg_anim_turn_towards(dude_obj, tar_hex, 0);
      if (tar_rot != (tar_rot_to_dude + 1) % 6) andAlso (tar_rot != (tar_rot_to_dude + 5) % 6) andAlso (tar_rot != tar_rot_to_dude) then begin
         reg_anim_turn_towards(target, anim_tar_rot_tile, 0);
         reg_anim_animate(target, ANIM_stand, -1);
      end
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_animate(dude_obj, ANIM_stand, -1);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      reg_anim_callback(callback_add_timed_event_FLEE_FROM_DUDE);
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_target_is_fleeing begin // fleeing and add timed event flee_or_return
   variable target = anim_tar_obj;
   variable dude_hex = tile_num(dude_obj);
   variable tar_hex = tile_num(anim_tar_obj);
   variable tile_1 = get_tile_with_free_path(target);
   variable tar_rot = rotation_to_tile(tar_hex, anim_tar_rot_tile);
   variable tar_rot_to_dude = rotation_to_tile(tar_hex, dude_hex);
   variable arr_key;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui);
      reg_anim_turn_towards(dude_obj, tar_hex, 0);
      if (tar_rot != (tar_rot_to_dude + 1) % 6) andAlso (tar_rot != (tar_rot_to_dude + 5) % 6) andAlso (tar_rot != tar_rot_to_dude) then begin
         reg_anim_turn_towards(target, anim_tar_rot_tile, 0);
         reg_anim_animate(target, ANIM_stand, -1);
      end
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_animate(dude_obj, ANIM_stand, -1);
      reg_anim_turn_towards(dude_obj, tar_hex, -1);
      reg_anim_callback(callback_add_timed_event_FLEE_FROM_DUDE);
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end


procedure ANIM_target_is_fleeing_after_giving_item_all_types begin
   variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   variable dude_hex = tile_num(dude_obj);
   variable before_dude_hex = tile_num_in_direction(dude_hex,rotation_to_tile(dude_hex,tar_hex), 1);
   variable money_ptr = obj_carrying_pid_obj(target, PID_BOTTLE_CAPS);
   variable money_count = obj_is_carrying_obj(target, money_ptr);
   variable arr_key;
   if target > 0 then begin
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui_15);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_turn_towards(dude_obj, tar_hex, 0);
      reg_anim_animate(target, ANIM_stand, -1);
      if money_count >= 20 then begin
         reg_anim_obj_move_to_tile(target, before_dude_hex, -1);
         reg_anim_turn_towards(dude_obj, before_dude_hex, 0);
         reg_anim_callback(show_float_msg_pls_dont_kill);
         if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) then begin
            reg_anim_animate(target, ANIM_magic_hands_middle, -1);
         end
         reg_anim_animate(dude_obj, ANIM_magic_hands_middle, 2);
         reg_anim_callback(target_drop_random_item);
         reg_anim_turn_towards(target, dude_hex, -1);
      end
      else begin
         reg_anim_callback(show_float_msg_pls_dont_kill);
         if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
            reg_anim_animate(target, ANIM_magic_hands_ground, -1);
         end
         reg_anim_callback(target_drop_random_item);
         reg_anim_animate(dude_obj, ANIM_stand, -1);
         reg_anim_turn_towards(target, dude_hex, -1);
      end
      reg_anim_callback(callback_add_timed_event_FLEE_FROM_DUDE);
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure ANIM_target_is_fleeing_after_missed_punch_child begin
   variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   variable dude_hex = tile_num(dude_obj);
   variable before_dude_hex = tile_num_in_direction(dude_hex,rotation_to_tile(dude_hex,tar_hex), 1);
   variable target_fid = obj_art_fid(target);
   variable target_proto_fid = critter_art_fid(target);
   variable power_armor = player_wearing_power_armor;
   variable money_ptr = obj_carrying_pid_obj(target, PID_BOTTLE_CAPS);
   variable money_count = obj_is_carrying_obj(target, money_ptr);
   variable arr_key;
   if target > 0 then begin
      inven_unwield(target);
      arr_key = scan_array(timed_event_targets_array, target);
      if arr_key >= 0 then begin
         set_array(timed_event_targets_array, (arr_key+arr_shift_fixed_num),-1);
      end
      if right_hand_stolen == 1 then inven_unwield(right_hand_item_target);
      reg_anim_combat_check(0);
      reg_anim_clear(target);
      reg_anim_func(REG_ANIM_BEGIN, RB_RESERVED);
      reg_anim_callback(disable_ui_15);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_turn_towards(dude_obj, target, -1);
      reg_anim_animate(target, ANIM_stand, -1);
      reg_anim_obj_move_to_tile(target, before_dude_hex, -1);
      reg_anim_turn_towards(target, dude_hex, -1);
      reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
      //
      // player is wearing power armor
      if power_armor > 0 then begin
         reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),-1);
         reg_anim_animate(target, ANIM_throw_punch, 0);
         reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_hit_from_front,snd_human),5);
         reg_anim_animate(target, ANIM_hit_from_front, 0);
         reg_anim_turn_towards(target, dude_hex, -1);
         if random(0,1) then begin
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_hitting),-1);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_hit_from_front,snd_human),5);
            reg_anim_animate(target, ANIM_hit_from_front, 0);
            reg_anim_turn_towards(target, dude_hex, -1);
         end
      end
      // player is not wearing power armor
      else begin
         reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
         reg_anim_animate(target, ANIM_throw_punch, 0);
         reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_contact),2);
         reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
         reg_anim_turn_towards(target, dude_hex, -1);
         reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         if random(0,1) then begin
            reg_anim_play_sfx(target,sfx_build_char_name(target,ANIM_throw_punch,snd_weapon_attack),-1);
            reg_anim_animate(target, ANIM_throw_punch, 0);
            reg_anim_play_sfx(dude_obj,sfx_build_char_name(dude_obj,ANIM_dodge_anim,snd_contact),2);
            reg_anim_animate(dude_obj, ANIM_dodge_anim, 0);
            reg_anim_turn_towards(target, dude_hex, -1);
            reg_anim_turn_towards(dude_obj, before_dude_hex, -1);
         end
      end
      if money_count >= 20 then begin
         reg_anim_callback(show_float_msg_pls_dont_kill);
         reg_anim_animate(target, ANIM_stand, -1);
         if (art_exists_basic_anim(target,ANIM_magic_hands_middle)) then begin
            reg_anim_animate(target, ANIM_magic_hands_middle, -1);
            reg_anim_animate(dude_obj, ANIM_magic_hands_middle, 2);
         end
         reg_anim_callback(target_drop_random_item);
         reg_anim_turn_towards(target, dude_hex, -1);
      end
      else begin
         reg_anim_callback(show_float_msg_pls_dont_kill);
         reg_anim_animate(target, ANIM_stand, -1);
         if (art_exists_basic_anim(target,ANIM_magic_hands_ground)) then begin
            reg_anim_animate(target, ANIM_magic_hands_ground, -1);
         end
         reg_anim_callback(target_drop_random_item);
         reg_anim_animate(dude_obj, ANIM_stand, -1);
         reg_anim_turn_towards(target, dude_hex, -1);
      end
      reg_anim_callback(callback_add_timed_event_FLEE_FROM_DUDE);
      reg_anim_callback(enable_ui);
      reg_anim_callback(clear_gvars);
      reg_anim_end();
   end
end

procedure free_array_timed_event_3 begin
   variable target;
   variable time_in_ticks = game_time;
   variable arr_key;
   variable arr_len = len_array(timed_event_targets_array);
   variable event_num;
   variable event_time;
   variable i;
   for (i = 0; i < (2 * arr_len) + 60; i+=(arr_shift_max+1)) begin
      arr_key = i;
      target = get_array(timed_event_targets_array, (arr_key + arr_shift_ptr));
      if target > 0 then begin
         event_num = get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num));
         if event_num == 3 then begin
            event_time = get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time));
            if event_time <= game_time then begin
               call rm_timed_event_number(target, 3);
            end
         end
      end
   end
   add_global_timer_event(game_ticks(3), fixed_param_steal);
end

procedure free_array_timed_event_4 begin
   variable target;
   variable time_in_ticks = game_time;
   variable arr_key;
   variable arr_len = len_array(timed_event_targets_array);
   variable event_num;
   variable event_time;
   variable i;
   for (i = 0; i < (2 * arr_len) + 60; i+=(arr_shift_max+1)) begin
      arr_key = i;
      target = get_array(timed_event_targets_array, (arr_key + arr_shift_ptr));
      if target > 0 then begin
         event_num = get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num));
         if event_num == 4 then begin
            event_time = get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time));
            if event_time <= game_time then begin
               call rm_timed_event_number(target, 4);
            end
         end
      end
   end
   add_global_timer_event(game_ticks(2), fixed_param_steal);
end

procedure timed_event_p_proc begin
   variable target;
   variable time_in_ticks;
   variable tar_rot;
   variable tar_cur_rot;
   variable tar_tile;
   variable tar_cur_tile;
   variable tar_script_id;
   variable arr_len;
   variable arr_key;
   variable event_num;
   variable event_time;
   variable i;
   variable targets_number_max;
   variable targets_number;
   if not(combat_is_initialized) andAlso (dude_is_in_anim <= 0) then begin
      if (fixed_param == fixed_param_steal) then begin
         arr_len = len_array(timed_event_targets_array);
         if arr_len >= 10 then begin
            targets_number_max = arr_len / (arr_shift_max + 1);
            for (i = 0; i < (2 * arr_len) + 60; i+=(arr_shift_max+1)) begin
               arr_key = i;
               target = get_array(timed_event_targets_array,(arr_key + arr_shift_ptr));
               // target check
               if target > 0 then begin
                  targets_number += 1;
                  time_in_ticks = game_time;
                  event_time = get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time));
                  // time check

                  if event_time <= time_in_ticks then begin
                     event_num = get_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num));

                     //NUM 1 - attack if target can see dude
                     if event_num == 1 then begin
                        if attack_delay > 0 then begin
                           attack_delay = 0;
                           set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_time),(time_in_ticks+game_ticks(4)));
                        end
                        else begin
                           call attack_the_dude(target);
                        end
                        continue;
                     end
                     //
                     //NUM 2 - flee from dude if dude is near and target can see dude
                     else if event_num == 2 then begin

                        call Flee_From_Dude_proc(target);
                        continue;
                     end
                     //
                     //NUM 3 - return to the starting point
                     else if event_num == 3 then begin
                        tar_tile = get_array(timed_event_targets_array, (arr_key + arr_shift_tile));
                        //animate if not on the starting tile
                        if tile_num(target) != tar_tile then begin
                           animate_move_obj_to_tile(target, tar_tile, (ANIMATE_WALK));
                           if not(anim_busy(target)) then begin
                              call remove_script_save_lvars(target);
                              animate_move_obj_to_tile(target, tar_tile, (ANIMATE_WALK));
                           end
                           if not(crit_is_moving(target)) then begin
                              if is_in_array(get_unique_id(target), timed_event_targets_lvar_array) then begin
                                 tar_script_id = (get_array(timed_event_targets_array, (arr_key + arr_shift_script)));
                                 call add_script_restore_lvars(target, tar_script_id);
                              end
                           end
                           continue;
                        end
                        else begin
                           tar_rot = (get_array(timed_event_targets_array, (arr_key + arr_shift_rot))) - 1;
                           anim(target, ANIMATE_ROTATION, tar_rot);
                           tar_cur_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
                           //remove the target from the array if it is in the starting position
                           if tar_rot == tar_cur_rot then begin
                              if is_in_array(get_unique_id(target), timed_event_targets_lvar_array) then begin
                                 tar_script_id = (get_array(timed_event_targets_array, (arr_key + arr_shift_script)));
                                 call add_script_restore_lvars(target, tar_script_id);
                              end
                              call rm_timed_event_target(target, arr_key);
                              continue;
                           end
                           //add the target to the array_anim_rotation if it is not in orig_rot
                           else begin
                           //animate rotation to orig_rot if on the starting tile
                              call remove_script_save_lvars(target);
                              anim(target, ANIMATE_ROTATION, tar_rot);
                              tar_cur_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
                              if is_in_array(get_unique_id(target), timed_event_targets_lvar_array) then begin
                                 tar_script_id = (get_array(timed_event_targets_array, (arr_key + arr_shift_script)));
                                 call add_script_restore_lvars(target, tar_script_id);
                              end

                              if tar_rot == tar_cur_rot then begin
                                 call rm_timed_event_target(target, arr_key);
                                 continue;
                              end
                              else begin
                                 set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num), 4);
                                 continue;
                              end
                           end
                        end
                     end
                     //
                     // turn to original rotation
                     else if event_num == 4 then begin
                        tar_rot = (get_array(timed_event_targets_array, (arr_key + arr_shift_rot))) - 1;
                        anim(target, ANIMATE_ROTATION, tar_rot);
                        tar_cur_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
                        if tar_rot == tar_cur_rot then begin
                           if is_in_array(get_unique_id(target), timed_event_targets_lvar_array) then begin
                              tar_script_id = (get_array(timed_event_targets_array, (arr_key + arr_shift_script)));
                              call add_script_restore_lvars(target, tar_script_id);
                           end
                           call rm_timed_event_target(target, arr_key);
                           continue;
                        end
                        else begin
                           call remove_script_save_lvars(target);
                           anim(target, ANIMATE_ROTATION, tar_rot);
                           tar_cur_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
                           if is_in_array(get_unique_id(target), timed_event_targets_lvar_array) then begin
                              tar_script_id = (get_array(timed_event_targets_array, (arr_key + arr_shift_script)));
                              call add_script_restore_lvars(target, tar_script_id);
                           end

                           if tar_rot == tar_cur_rot then begin
                              call rm_timed_event_target(target, arr_key);
                              continue;
                           end
                           else begin
                              set_array(timed_event_targets_array, (arr_key + arr_shift_fixed_num), 4);
                              continue;
                           end
                        end
                     end
                     //
                  end
                  // exit the check loop if all targets have been processed
                  if targets_number > targets_number_max then begin
                     break;
                  end
               end
            end
         end
      end
   end
   // Penalty for failed stealing
   if (fixed_param == 4) then begin
      call update_penalty_value(cur_town);
   end
   // enable game ui if
   if (fixed_param == 5) then begin
      if game_ui_is_disabled then begin
         game_ui_enable;
         call clear_gvars();
      end
   end
   else begin
      arr_len = len_array(timed_event_targets_array);
      if arr_len > 0 then begin
         time_in_ticks = game_time;
         if timer_added_time + (game_ticks(1)) <= time_in_ticks then begin
            add_global_timer_event(game_ticks(2), fixed_param_steal);
            timer_added_time = time_in_ticks;
         end
      end
   end
end

procedure ANIM_sequence_get_caught_stealing begin
   variable target = anim_tar_obj;
   variable tar_hex = tile_num(target);
   variable tar_max_hp;
   variable gvar_value = get_tfsp_gvar_value(cur_town);
   variable dude_hex = tile_num(dude_obj);
   variable dude_rot_to_tar = rotation_to_tile(dude_hex, tar_hex);
   variable power_armor = player_wearing_power_armor;
   variable karma = global_var(GVAR_PLAYER_REPUTATION);
   variable childkiller = global_var(GVAR_CHILDKILLER_REPUTATION);
   variable berserker = global_var(GVAR_BERSERKER_REPUTATION);
   variable harmless_perk = has_trait(TRAIT_PERK, dude_obj, PERK_harmless_perk);
   variable sex_appeal_trait = has_trait(TRAIT_TRAIT, dude_obj, TRAIT_sex_appeal);
   variable timed_event_num;
   variable timed_event_time;
   variable behind_dude_hex = tile_num_in_direction(dude_hex,((dude_rot_to_tar+3) % 6), 2);
   variable stolen_goods_count = len_array(stolen_items_ptr_arr);
   variable pickpocket_count = is_in_array_last_pickpocket_targets(target, 0) - harmless_perk - sex_appeal_trait;
   variable was_caught_count = ((pickpocket_count - 1 - value_caught_stealing) / (value_caught_stealing - 1));
   variable witness;
   variable witness_array = objects_in_radius(dude_hex, 25, dude_elevation, OBJ_TYPE_CRITTER);
   variable blocking_obj;
   dude_was_robbed = 0;
   call inc_tfsp_gvar_value(cur_town, 1);
   set_global_var(GVAR_PLAYER_REPUTATION,(karma - 5));
   if Sonora > 0 then childkiller = berserker;
      foreach witness in witness_array begin
         if witness > 0 andAlso random(0,1) andAlso (get_proto_data(obj_pid(witness),PROTO_CR_BODY_TYPE) == CR_BODY_BIPED) andAlso witness != dude_obj andAlso witness != target andAlso obj_is_visible_flag(witness) then begin
            blocking_obj = obj_blocking_line(witness, dude_hex, BLOCKING_TYPE_SIGHT);
            if blocking_obj <= 0 or blocking_obj == dude_obj then begin
               call add_timed_event_TURN_BACK(witness, game_ticks(random(10, 20)));
               if random(0, 1) then begin
                  float_msg(witness, "?!", FLOAT_MSG_YELLOW);
               end
               anim(witness, ANIMATE_ROTATION, rotation_to_tile(tile_num(witness), dude_hex));
            end
         end
      end
      if dude_wpn > 0 then begin
         inven_unwield(dude_obj);
         dude_unwield = 1;
      end
      anim(target, ANIMATE_ROTATION, rotation_to_tile(tar_hex, dude_hex));
       //target is child
      if anim_tar_kill_type == KILL_TYPE_children_kills then begin
         //the player doesn't scare kids
         if power_armor <= 0 andAlso childkiller <= 0 andAlso berserker <= 0 andAlso karma <= KARMA_BETRAYER then begin
            //The target has never caught the player stealing
            if was_caught_count <= 0 then begin
               //doesn't do anything. common case
               if random(0,5) or stolen_goods_count <= 0 then begin
                  call ANIM_common_case_child();
               end
               //returns stolen goods that were found. "rare" case
               else begin
                  if anim_tar_gender <= 0 andAlso not(random(0,4)) then begin
                     call ANIM_rare_case_hit_dude_child();
                  end
                  else begin
                     call ANIM_rare_case_child();
                  end
               end
            end
            //The target has already caught the player stealing at least once
            else begin
               //common case
               if stolen_goods_count > 0 andAlso random(0,3) then begin
                  if random(0,1) then begin
                     call ANIM_rare_case_child();
                  end
                  else begin
                     call ANIM_rare_case_hit_dude_child();
                  end
               end
               //"rare" case
               else begin
                  if random(0,55) then begin
                     call ANIM_flee_child();
                  end
                  else begin
                     call ANIM_target_is_fleeing_after_giving_item_all_types();
                  end
               end
            end
         end
         //the player scares kids
         else begin
            //if the player has already killed children
            if childkiller >= 1 then begin
               if random(0,15) andAlso karma <= 0 then begin
                  call ANIM_target_is_fleeing_after_giving_item_all_types();
               end
               else begin
                  call ANIM_dude_take_0_dmg_and_kills_all_types();
               end
            end
            //if the player has not killed children yet
            else begin
               //runs away in fear
               if random(0,10) then begin
                  call ANIM_flee_child();
               end
               //flees in fear and leaves the ransom
               else begin
                  if anim_tar_gender <= 0 andAlso not(random(0,10)) then begin
                     call ANIM_target_is_fleeing_after_missed_punch_child();
                  end
                  else begin
                     call ANIM_target_is_fleeing_after_giving_item_all_types();
                  end
               end
            end
         end
      end
      else if anim_tar_kill_type == KILL_TYPE_robot_kills then begin
         if was_caught_count <= 0 then begin
            call add_timed_event_ATTACK_DUDE_ON_SIGHT(target,game_ticks(6));
            anim(target, ANIMATE_ROTATION, rotation_to_tile(tile_num(target), tile_num(dude_obj)));
            call show_float_msg_death_threat(target);
            add_global_timer_event(game_ticks(6),fixed_param_steal);
            call clear_gvars();
         end
         else begin
            call show_float_msg_attack(target);
            call clear_gvars();
            attack_setup(target, dude_obj);
         end
      end
       //target is not a child
      else begin
          //target is supermutant
         if anim_tar_kill_type == KILL_TYPE_super_mutant_kills then begin
            if was_caught_count <= 0 then begin
               call ANIM_dude_is_attacked_by_supermutant(75 + (2 * gvar_value) - dude_lu);
            end
            else begin
               if was_caught_count <= 1 then begin
                  call ANIM_dude_is_attacked_by_supermutant_was_caught_before(85 + (2 * gvar_value) - dude_lu);
               end
               else begin
                  call show_float_msg_attack(target);
                  call clear_gvars();
                  attack_setup(target, dude_obj);
               end
            end
         end
          //target is not a supermutant
         else begin
            if (military_fid(critter_art_fid(target))) or (power_armor_fid(critter_art_fid(target))) then begin
               if was_caught_count < 0 then begin
                  if stolen_goods_count > 0 andAlso anim_tar_fire_arm > 0 andAlso right_hand_stolen <= 0 then begin
                     call ANIM_target_aim_at_dude(1);
                  end
                  else begin
                     if power_armor <= 0 then begin
                        call ANIM_dude_is_attacked_by_human(65 + (2 * gvar_value) - dude_lu);
                     end
                     else begin
                        call ANIM_dude_is_attacked_by_human_was_caught_before(35 + (2 * gvar_value) - dude_lu);
                     end
                  end
               end
               else begin
                  if was_caught_count < 1 then begin
                     if stolen_goods_count > 0 andAlso anim_tar_fire_arm > 0 andAlso right_hand_stolen <= 0 then begin
                        call ANIM_target_aim_at_dude(was_caught_count);
                     end
                     else begin
                        call ANIM_dude_is_attacked_by_human_was_caught_before(85 + (2 * gvar_value) - dude_lu);
                     end
                  end
                  else begin
                     call show_float_msg_attack(target);
                     call clear_gvars();
                     attack_setup(target, dude_obj);
                  end
               end
            end
            //some tough NPCs
            else if tough_fid(critter_art_fid(target)) then begin
               //dude is wearing power armor
               if power_armor > 0 then begin
                  if was_caught_count <= 0 then begin
                     if berserker <= 0 then begin
                        if random(0,1) then begin
                           if random(0,2) then begin
                              call ANIM_harmless_response();
                           end
                           else begin
                              call ANIM_dude_is_attacked_by_human_was_caught_before(25 + (2 * gvar_value) - dude_lu);
                           end
                        end
                        else begin
                           call ANIM_neutral_response_all_types();
                        end
                     end
                     else begin
                        if random(0,5) then begin
                           if random(0,10) then begin
                              if random(0,3) then begin
                                 call ANIM_neutral_response_all_types();
                              end
                              else begin
                                 call ANIM_dude_is_attacked_by_human_was_caught_before(25 + (2 * gvar_value) - dude_lu);
                              end
                           end
                           else begin
                              call ANIM_harmless_response();
                           end
                        end
                        else begin
                           if random(0,30) then begin
                              call ANIM_target_is_fleeing();
                           end
                           else begin
                              call ANIM_target_is_fleeing_after_giving_item_all_types();
                           end
                        end
                     end
                  end
                  else begin
                     if was_caught_count <= 1 then begin
                        if berserker <= 0 then begin
                           tar_max_hp = get_critter_stat(target, STAT_max_hp);
                           if tar_max_hp < 100 then begin
                              if random(0,5) then begin
                                 call ANIM_neutral_response_all_types();
                              end
                              else begin
                                 call ANIM_target_is_fleeing();
                              end
                           end
                           else begin
                              if random(0,1) then begin
                                 call ANIM_neutral_response_all_types();
                              end
                              else begin
                                 call ANIM_dude_is_attacked_by_human(35 + (2 * gvar_value) - dude_lu);
                              end
                           end
                        end
                        else begin
                           if random(0,2) then begin
                              call ANIM_neutral_response_all_types();
                           end
                           else begin
                              if random(0,30) then begin
                                 if random(0,3) then begin
                                    call ANIM_target_is_fleeing();
                                 end
                                 else begin
                                    call ANIM_target_is_fleeing_after_giving_item_all_types();
                                 end
                              end
                              else begin
                                 call ANIM_dude_take_0_dmg_and_kills_all_types();
                              end
                           end
                        end
                     end
                     else begin
                        call show_float_msg_attack_frightened(target);
                        tar_max_hp = get_critter_stat(target, STAT_max_hp);
                        if tar_max_hp < 100 andAlso tar_max_hp < get_critter_stat(dude_obj,STAT_max_hp) then begin
                           set_tar_flee = target;
                        end
                        call clear_gvars();
                        attack_setup(target, dude_obj);
                     end
                  end
               end
               //dude is not wearing power armor
               else begin
                  if was_caught_count <= 0 then begin
                     if stolen_goods_count > 0 andAlso anim_tar_fire_arm > 0 andAlso right_hand_stolen <= 0 andAlso random(0,1) then begin
                        call ANIM_target_aim_at_dude(random(0,1));
                     end
                     else begin
                        call ANIM_dude_is_attacked_by_human(45 + (2 * gvar_value) - dude_lu);
                     end
                  end
                  else begin
                     if was_caught_count <= 1 then begin
                        if stolen_goods_count > 0 andAlso anim_tar_fire_arm > 0 andAlso right_hand_stolen <= 0 andAlso random(0,1) then begin
                           call ANIM_target_aim_at_dude(was_caught_count);
                        end
                        else begin
                           call ANIM_dude_is_attacked_by_human_was_caught_before(65 + (2 * gvar_value) - dude_lu);
                        end
                     end
                     else begin
                        call show_float_msg_attack(target);
                        call clear_gvars();
                        attack_setup(target, dude_obj);
                     end
                  end
               end
            end
             //weak targets
            else if weak_fid(target) then begin
               //dude first time caught
               if was_caught_count <= 0 then begin
                  //dude is not a berserker
                  if berserker <= 0 then begin
                     //nothing or rare return loot
                     if random(0,10) then begin
                        call ANIM_harmless_response();
                     end
                     else begin
                        call ANIM_neutral_response_all_types();
                     end
                  end
                  //dude is a berserker
                  else begin
                     //neutral or flee
                     if random(0,2) then begin
                        //nothing or very rare return loot
                        if random(0,100) then begin
                           call ANIM_harmless_response();
                        end
                        else begin
                           call ANIM_neutral_response_all_types();
                        end
                     end
                     //flee
                     else begin
                         //just flee
                        if random(0,3) then begin
                           call ANIM_target_is_fleeing();
                        end
                        //drop loot before fleeing
                        else begin
                           call ANIM_target_is_fleeing_after_giving_item_all_types();
                        end
                     end
                  end
               end
               //dude was already caught
               else begin
                   //secon time caught
                  if was_caught_count <= 1 then begin
                     //dude is not a berserker
                     if berserker <= 0 then begin
                        if random(0,10) then begin
                           call ANIM_target_is_fleeing();
                        end
                        else begin
                           call ANIM_target_is_fleeing_after_giving_item_all_types();
                        end
                     end
                     //dude is a berserker
                     else begin
                        if random(0,1) then begin
                           call ANIM_target_is_fleeing();
                        end
                        else begin
                           if random(0,30) then begin
                              if random(0,3) then begin
                                 call ANIM_target_is_fleeing();
                              end
                              else begin
                                 call ANIM_target_is_fleeing_after_giving_item_all_types();
                              end
                           end
                           //dude kills his target
                           else begin
                              call ANIM_dude_take_0_dmg_and_kills_all_types();
                           end
                        end
                     end
                  end
                  else begin
                     call show_float_msg_attack_frightened(target);
                     call clear_gvars();
                     set_tar_flee = target;
                     attack_setup(target, dude_obj);
                  end
               end
            end
             //just normal npc
            else begin
               //dude is wearing power armor
               if power_armor > 0 then begin
                  if was_caught_count <= 0 then begin
                     if berserker <= 0 then begin
                        if random(0,1) then begin
                           call ANIM_harmless_response();
                        end
                        else begin
                           call ANIM_neutral_response_all_types();
                        end
                     end
                     else begin
                        if random(0,5) then begin
                           if random(0,1) then begin
                              if random(0,4) then begin
                                 call ANIM_harmless_response();
                              end
                              else begin
                                 call ANIM_dude_is_attacked_by_human_was_caught_before(25 + (2 * gvar_value) - dude_lu);
                              end
                           end
                           else begin
                              call ANIM_neutral_response_all_types();
                           end
                        end
                        else begin
                           if random(0,30) then begin
                              call ANIM_target_is_fleeing();
                           end
                           else begin
                              call ANIM_target_is_fleeing_after_giving_item_all_types();
                           end
                        end
                     end
                  end
                  else begin
                     if was_caught_count <= 1 then begin
                        if berserker <= 0 then begin
                           if random(0,5) then begin
                              call ANIM_neutral_response_all_types();
                           end
                           else begin
                              if random(0,5) then begin
                                 call ANIM_target_is_fleeing();
                              end
                              else begin
                                 call ANIM_target_is_fleeing_after_giving_item_all_types();
                              end
                           end
                        end
                        else begin
                           if random(0,1) then begin
                              call ANIM_neutral_response_all_types();
                           end
                           else begin
                              if random(0,30) then begin
                                 if random(0,3) then begin
                                    call ANIM_target_is_fleeing();
                                 end
                                 else begin
                                    call ANIM_target_is_fleeing_after_giving_item_all_types();
                                 end
                              end
                              else begin
                                 call ANIM_dude_take_0_dmg_and_kills_all_types();
                              end
                           end
                        end
                     end
                     else begin
                        call show_float_msg_attack_frightened(target);
                        tar_max_hp = get_critter_stat(target, STAT_max_hp);
                        if tar_max_hp < 100 andAlso tar_max_hp < get_critter_stat(dude_obj,STAT_max_hp) then begin
                           set_tar_flee = target;
                        end
                        call clear_gvars();
                        attack_setup(target, dude_obj);
                     end
                  end
               end
               //dude is not wearing power armor
               else begin
                  if was_caught_count <= 0 then begin
                     if stolen_goods_count > 0 andAlso anim_tar_fire_arm > 0 andAlso right_hand_stolen <= 0 andAlso random(0,1) then begin
                        call ANIM_target_aim_at_dude(0);
                     end
                     else begin
                         //return stolen
                        if random(0,10) then begin
                           call ANIM_neutral_response_all_types();
                        end
                        else begin
                           call ANIM_dude_is_attacked_by_human(15 + (2 * gvar_value) - dude_lu);
                        end
                     end
                  end
                  else begin
                     if was_caught_count <= 1 then begin
                        if stolen_goods_count > 0 andAlso anim_tar_fire_arm > 0 andAlso right_hand_stolen <= 0 andAlso random(0,1) then begin
                           call ANIM_target_aim_at_dude(was_caught_count);
                        end
                        else begin
                           call ANIM_dude_is_attacked_by_human_was_caught_before(20 + (2 * gvar_value) - dude_lu);
                        end
                     end
                     else begin
                        call show_float_msg_attack(target);
                        call clear_gvars();
                        attack_setup(target, dude_obj);
                     end
                  end
               end
            end
         end
      end

end


//by JimTheDinosaur https://nma-fallout.com/threads/stuff-for-define_extra-h.202989/page-2
procedure real_rotation_to_tile(variable begin_tile, variable dest_tile) begin
  	variable temp_dist = tile_distance(begin_tile, dest_tile);
  	variable temp_rot = rotation_to_tile(begin_tile, dest_tile);
  	if temp_rot == 4 then begin
  	   if tile_distance(tile_num_in_direction(begin_tile, temp_rot, temp_dist), dest_tile) > tile_distance(tile_num_in_direction(begin_tile, 5, temp_dist), dest_tile) then
  	      temp_rot = 5;
  	   else if tile_distance(tile_num_in_direction(begin_tile, temp_rot, temp_dist), dest_tile) > tile_distance(tile_num_in_direction(begin_tile, 3, temp_dist), dest_tile) then
  	      temp_rot = 3;
  	   end
  	   else if temp_rot == 1 then begin
  	   if tile_distance(tile_num_in_direction(begin_tile, temp_rot, temp_dist), dest_tile) > tile_distance(tile_num_in_direction(begin_tile, 0, temp_dist), dest_tile) then
  	      temp_rot = 0;
  	   else if tile_distance(tile_num_in_direction(begin_tile, temp_rot, temp_dist), dest_tile) > tile_distance(tile_num_in_direction(begin_tile, 2, temp_dist), dest_tile) then
  	      temp_rot = 2;
  	end
  	return temp_rot;
end

procedure REMOVEINVENOBJ_HOOK begin
   variable rm_owner = get_sfall_arg;
   variable rm_item = get_sfall_arg;
   variable rm_item_num = get_sfall_arg;
   variable rm_reason = get_sfall_arg;
   variable new_owner = get_sfall_arg;
   // If the player stole an item corresponding to the item from the right or left hand
   if stealing_from_hands == 0 andAlso rm_owner == right_hand_item_target andAlso new_owner == dude_obj then begin
      if right_hand_stolen == 0 andAlso (rm_item == right_hand_item_copy) or (right_hand_item_pid == obj_pid(rm_item) andAlso obj_is_carrying_obj_pid(rm_owner,right_hand_item_pid) <= rm_item_num) then begin
         if who_carry_amount(dude_obj) + (item_weight(rm_item) * rm_item_num) <= who_max_carry(dude_obj) then begin
            right_hand_item_copy = rm_item;
            right_hand_stolen = 1;
         end
      end
      if left_hand_stolen == 0 andAlso (rm_item == left_hand_item_copy) or (left_hand_item_pid == obj_pid(rm_item) andAlso obj_is_carrying_obj_pid(rm_owner,left_hand_item_pid) <= rm_item_num) then begin
         if who_carry_amount(dude_obj) + (item_weight(rm_item) * rm_item_num) <= who_max_carry(dude_obj) then begin
            left_hand_item_copy = rm_item;
            left_hand_stolen = 1;
         end
      end
   end
end

procedure GAMEMODECHANGE_HOOK begin
   variable game_exit = get_sfall_arg; // int     arg0 - event type: 1 - when the player exits the game, 0 - otherwise
   variable lastgamemode = get_sfall_arg; //  int     arg1 - the previous game mode
   variable game_mode = get_game_mode;
   variable tmp;
   variable loot_obj_inv_count;
   variable i;
   loot_obj_inv_offset_last = -2;
   if game_mode == 0 then begin
      if steal_chance_win > 0 then begin
         set_global_script_type(3);
         set_global_script_repeat(0);
         steal_chance_win = 0;
         mouse_add = 0;
      end
      dude_lu = dude_luck;
   end
   if color_print > 0 then begin
      if ExpandInventory >= 2 then begin
         interface_print("|||||||||||||||||||||", WINTYPE_INVENTORY, 562, 120, color_print);
      end
      else begin
         interface_print("|||||||||||||||||||||", WINTYPE_INVENTORY, 426, 120, color_print);
      end
      color_print = 0;
   end
   if timer_removed == 1 then begin
      timer_removed = 0;
      add_global_timer_event(game_ticks(2), fixed_param_steal);
   end

   if lastgamemode bwand WORLDMAP then begin
      caught_stealing_buy_penalty = 1;
      caught_stealing_sell_penalty = 1;
      call update_penalty_value(cur_town);
      call clear_array_last_pickpocket_targets();
   end
   if game_mode bwand DIALOG then begin
      call speech_barter_penalty(1);
   end
   if (lastgamemode bwand DIALOG) then begin
      call speech_barter_penalty(0);
   end
   //remoove temp. party member
   if party_remove_ptr > 0 andAlso get_game_mode == 0 then begin
      party_remove(party_remove_ptr);
      party_remove_ptr = 0;
   end

   if anim_tar_obj > 0 andAlso game_mode == 0 then begin
      dude_is_in_anim = 1;
      call ANIM_sequence_get_caught_stealing();
      remove_timer_event(fixed_param_steal);
      timer_removed = 1;
   end

   if game_mode == INTFACELOOT then begin
      show_steal_chance = 1;
   end
   //unwield and delete the weapon(or left hand item) if it was stolen
   if stealing_from_hands >= 0 andAlso lastgamemode == INTFACELOOT andAlso not(game_mode bwand COUNTERWIN) andAlso game_mode == 0 then begin
      if right_hand_stolen == 1 then begin
         inven_unwield(right_hand_item_target);
         destroy_object(right_hand_item);
         right_hand_stolen = -1;
         right_hand_item = -1;
         right_hand_item_pid = -1;
         right_hand_item_copy = -1;
      end
      else if right_hand_stolen == 0 then begin
         if obj_is_carrying_obj(right_hand_item_target,right_hand_item_copy) <= 0 then begin
            right_hand_item_copy = obj_carrying_pid_obj(right_hand_item_target, right_hand_item_pid);
         end
         tmp = rm_mult_objs_from_inven(right_hand_item_target, right_hand_item_copy, 1);
         destroy_object(right_hand_item_copy);
         right_hand_stolen = -1;
         right_hand_item = -1;
         right_hand_item_pid = -1;
         right_hand_item_copy = -1;
      end

      if left_hand_stolen == 1 then begin
         destroy_object(left_hand_item);
         left_hand_stolen = -1;
         left_hand_item = -1;
         left_hand_item_pid = -1;
         left_hand_item_copy = -1;
      end
      else if left_hand_stolen == 0 then begin
         if obj_is_carrying_obj(right_hand_item_target,left_hand_item_copy) <= 0 then begin
            left_hand_item_copy = obj_carrying_pid_obj(right_hand_item_target, left_hand_item_pid);
         end
         tmp = rm_mult_objs_from_inven(right_hand_item_target, left_hand_item_copy, 1);
         destroy_object(left_hand_item_copy);
         left_hand_stolen = -1;
         left_hand_item = -1;
         left_hand_item_pid = -1;
         left_hand_item_copy = -1;
      end
      stealing_from_hands = -1;
      right_hand_item_target = -1;
   end
end

procedure STEAL_HOOK begin
   variable thief = get_sfall_arg;
   variable target = get_sfall_arg;
   variable item = get_sfall_arg; // Item being stolen / planted
   variable stype = get_sfall_arg; // 0 when stealing, 1 when planting
   variable quantity = get_sfall_arg; //quantity of items being stolen
   //int     ret0 - overrides hard-coded handler (1 - force success, 0 - force fail, -1 - use engine handler)
   variable user_steal_skill = has_skill(thief, SKILL_STEAL);
   variable user_sneak_skill = has_skill(thief, SKILL_SNEAK);
   variable target_steal_skill = has_skill(target, SKILL_STEAL);
   variable target_barter_skill = has_skill(target, SKILL_BARTER);
   variable skill_bonus;
   variable user_steal_skill_mult = 1.50;
   variable tar_pid = obj_pid(target);
   variable item_pid = obj_pid(item);
   variable item_name = obj_name(item);
   variable item_cost;
   variable target_pe = get_critter_stat(target, STAT_pe);
   variable target_base_pe = get_critter_base_stat(target, STAT_pe);
   variable target_min_pe;
   variable target_pe_mult;
   variable item_size;
   variable item_weight_lvar;

   variable chance_to_steal_without_item;
   variable rnd = 0;
   variable chance_to_steal;
   variable steal_bonus = 0;
   variable pickpocket = has_trait(TRAIT_PERK, dude_obj, PERK_pickpocket);
   variable night_vision = has_trait(TRAIT_PERK, dude_obj, PERK_night_vision );
   variable harmless = has_trait(TRAIT_PERK, dude_obj, PERK_harmless_perk );
   variable light_level = get_light_level;
   variable target_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
   variable target_rot_to_tar = rotation_to_tile(tile_num(target), tile_num(dude_obj));
   variable ally_rot = -6;
   variable ally_rot_to_tar = - 6;
   variable team = has_trait(TRAIT_OBJECT, target, OBJECT_TEAM_NUM);
   variable ally = 0;
   variable ally_team = -1;
   variable ally_pe = 0;
   variable max_steal_chance = 0;
   variable isSuccess = 0;
   variable min_skill_needed = 0;
   variable sneak_bonus;
   variable user_state = critter_state(dude_obj);
   variable taget_state = critter_state(target);
   variable distance;
   variable ally_state = -1;
   variable ally_cur_frm = -1;
   variable darkness_penalty;
   variable target_kill_type = critter_kill_type(target);
   variable party = party_member_list(0);
   variable target_in_party = is_in_array(target, party);
   variable right_hand_item_stealing;

   // force SUCCESS on party members and friends
   if target_in_party or has_trait(TRAIT_OBJECT, target, OBJECT_TEAM_NUM) == TEAM_PLAYER then begin
   //if target_in_party then begin
      //add temp. party member prevent XP gain
      if not(target_in_party) then begin
         party_add(target);
         party_remove_ptr = target;
      end
      set_sfall_return(1);
      return;
   end

   // PERK_pickpocket check for add|remove item size, cost and weight penalty
   // Prevents a steal fail when you don't have any space in your inventory
   if stype == 0 andAlso (who_carry_amount(thief) + (item_weight(item) * quantity)) > who_max_carry(thief) then begin
      set_sfall_return(1);
      return;
   end
   // Prevents a plant fail when you don't have any space in your inventory
   if stype == 1 andAlso (who_carry_amount(target) + (item_weight(item) * quantity)) > who_max_carry(target) then begin
      set_sfall_return(1);
      return;
   end
   // Stealing weapons from hand.
   if (item == right_hand_item_copy or item == left_hand_item_copy) andAlso stype == 0 then begin
      right_hand_item_target = target;
      right_hand_item_stealing = 1;
   end


      //chance_to_steal formula

   if user_steal_skill == 0 then user_steal_skill = 1;

   chance_to_steal_without_item = get_chance_to_steal_without_item(thief, target, item, stype, quantity);

   if chance_to_steal_without_item > 25000 then begin
      min_skill_needed = (chance_to_steal_without_item - 50000);
   end
   else begin
      chance_to_steal = get_chance_to_steal(thief, target, item, stype, quantity);
   end

   rnd = random(1, 100);
   if (chance_to_steal < rnd) then begin
         if (100 + target_pe * 10) >= random(0,(170+(user_sneak_skill/2))) then begin
            if stype == 0 then begin
               display_msg(modmsg(msg_fail_to_steal) + item_name + ".");
            end
            else begin
               display_msg(modmsg(msg_fail_to_plant) + item_name + ".");
            end
            if steal_chance_win > 0 then begin
               set_global_script_type(3);
               set_global_script_repeat(0);
               steal_chance_win = 0;
               mouse_add = 0;
            end
            if get_script(target) == 214 andAlso Et_tu <= 0 andalso Nevada <= 0 andAlso Resurrection <= 0 andAlso Sonora <= 0 then begin
               set_sfall_return(0);
               return;
            end
            else begin
               set_sfall_return(2);
            end
            steal_item_num = 0;
            isSuccess = 0;
            if not(critter_state(target) BWAND DAM_KNOCKED_DOWN) andAlso not(critter_state(target) BWAND DAM_KNOCKED_OUT) then begin
               call add_timed_event_TURN_BACK(target,game_ticks(random(3,5)));
               anim(target, ANIMATE_ROTATION, rotation_to_tile(tile_num(target), tile_num(dude_obj)));
               if obj_can_see_obj(target,dude_obj) then begin
                  call create_arrays_last_pickpocket_targets_and_add_target(target,value_caught_stealing);
                  call set_anim_tar_obj(target);
               end
               else begin
                  add_global_timer_event(game_ticks(1), fixed_param_steal);
                  float_msg(target, "?", FLOAT_MSG_PURPLE);
               end
            end
            tap_key(1);
            return;
         end
         else begin
            set_sfall_return(2);
            steal_count += 14 - random(0,dude_lu) + item_weight(item) / 3;
            isSuccess = 0;
            if stype == 0 then begin
               display_msg(modmsg(msg_fail_to_steal) + item_name + ".");
            end
            else begin
               display_msg(modmsg(msg_fail_to_plant) + item_name + ".");
            end
            return;
         end

   end
      //Successful attempt
   if chance_to_steal >= rnd then begin

      //penalty for stealing multiple things in a row
      steal_count += 21 - random(0,dude_lu) + item_weight(item);
      isSuccess = 1;
      if stype == 0 then begin
         if quantity >= obj_is_carrying_obj(target,item) then begin
            stolen_item = item;
         end
         if not(array_exists(planted_items_ptr_arr)) or not(is_in_array(item,planted_items_ptr_arr)) then begin
            call add_to_stolen_items_ptr_arr(item,quantity);
         end
         else begin
            set_array(planted_items_ptr_arr, scan_array(planted_items_ptr_arr, item), 0);
         end
      end
      else begin
         if not(array_exists(stolen_items_ptr_arr)) or not(is_in_array(item,stolen_items_ptr_arr)) then begin
            call add_to_planted_items_ptr_arr(item,quantity);
         end
         else begin
            set_array(stolen_items_ptr_arr, scan_array(stolen_items_ptr_arr, item), 0);
         end
      end
      set_sfall_return(1);
      if ExpandInventory >= 2 then begin
         inventory_redraw(-1);
         if last_dude_inv_offset > 0 then begin
            if last_dude_inv_count <= 12 then last_dude_inv_offset = last_dude_inv_offset - 1;
            write_int(0x59E844, last_dude_inv_offset);
         end
         if last_loot_obj_inv_offset > 0 then begin
            if last_loot_obj_inv_count <= 12 then last_loot_obj_inv_offset = last_loot_obj_inv_offset - 1;
            write_int(0x59E7EC, last_loot_obj_inv_offset);
         end
         last_dude_inv_offset = 0;
         last_loot_obj_inv_offset = 0;
      end
   end
   if team != TEAM_PLAYER andAlso not(target_in_party) then begin
      if StealRebalance == 2 andAlso steal_count == 0 andAlso isSuccess == 0 then begin
         display_msg(parse_str_2(modmsg(msg_steal_caught_original+stype*2), item_name, 0) + parse_str_2(modmsg(msg_cant_steal2+stype), min_skill_needed, 0));
         steal_count = 0;
      end
      if StealRebalance == 1 or steal_count > 0 or isSuccess == 1 then begin
         display_msg(parse_str_2(modmsg(msg_steal_caught_original + (isSuccess) + stype * 2), item_name, 0));
      end
      if StealRebalance == 1 andAlso chance_to_steal < 1 then begin
         display_msg(parse_str_2(modmsg(msg_cant_steal1+stype), item_name, 0));
      end
   end
end


procedure steal_handler_ecco begin
   variable thief = get_sfall_arg; // Sneak check result: 1 - success, 0 - failure
   variable target = get_sfall_arg; //  the duration in ticks for the current Sneak check (time depends on Sneak skill level)
   variable item = get_sfall_arg; // Item being stolen / planted
   variable stype = get_sfall_arg; // 0 when stealing, 1 when planting
   //variable quantity = get_sfall_arg; //quantity of items being stolen
   // Stealing weapons from hand
   if (item == right_hand_item_copy or item == left_hand_item_copy) andAlso stype == 0 then begin
      right_hand_item_target = target;
   end
end

procedure USESKILL_HOOK begin
   variable user = get_sfall_arg;
   variable target = get_sfall_arg;
   variable skill = get_sfall_arg;
   variable skill_bonus = get_sfall_arg;
   variable target_can_see_user;
   variable user_steal_skill;
   variable tar_pid;
   variable target_pe;
   variable target_pe_mult;
   variable target_min_pe;
   variable min_steal_skill;
   variable critter_type;
   variable target_steal_skill;
   variable target_barter_skill;
   variable user_sneak_skill;
   variable pickpocket;
   variable night_vision;
   variable harmless;
   variable empathy;
   variable thief_perk;
   variable master_thief;
   variable awareness;
   variable sex_appeal;
   variable light_level;
   variable target_rot;
   variable target_rot_to_tar;
   variable ally_rot;
   variable ally_rot_to_tar;
   variable team;
   variable ally;
   variable ally_team;
   variable ally_pe;
   variable tar_fid;
   variable tar_int;
   variable tar_gender;
   variable ally_can_see;
   variable rnd;
   variable user_state;
   variable taget_state;
   variable ally_state;
   variable ally_cur_frm;
   variable darkness_penalty;
   variable target_kill_type;
   variable obj;
   variable color;
   variable distance;
   variable gvar_value;
   variable arr_st_key;
   variable arr_st_time;
   variable arr_te_key;
   variable arr_te_num;
   variable was_caught_count;
   variable show_irritation_level;
   variable pickpocket_count;
   if MinStealReq <= 0 andAlso skill == SKILL_STEAL then begin
      if ECCO_steal_mod <= 0 andAlso steal_chance_win <= 0 then begin
         mouse_add = 0;
         steal_chance_win = 1;
         set_global_script_type(1);
         set_global_script_repeat(2);
      end
   end
   if (MinStealReq > 0 or MinWpnStealReq > 0) andAlso skill == SKILL_STEAL andAlso not(combat_is_initialized) andAlso obj_type(target) == OBJ_TYPE_CRITTER andAlso not(NO_STEAL(target)) andAlso get_critter_stat(target,STAT_current_hp) > 0 andAlso not(is_in_array(target, party_member_list(0))) then begin

      target_can_see_user = obj_can_see_obj(target, user);
      // setup attack on dude if target what to kill him and can see him
      if targets_prep_attack_attacking == target andAlso target_can_see_user then begin
         set_sfall_return(0);
         call attack_the_dude(target);
         targets_prep_attack_attacking = 0;
         return;
      end
      //if
      user_steal_skill = has_skill(user, SKILL_STEAL) + skill_bonus;
      //if user_steal_skill <= 0 then begin
         //display_msg(modmsg(msg_cant_pickpocket));
         //return;
      //end
      tar_pid = obj_pid(target);
      user_sneak_skill = has_skill(user, SKILL_SNEAK);
      // SKILL_SCIENCE and SKILL_REPAIR bonus for stealing from robots
      if target_kill_type == KILL_TYPE_robot_kills then begin
         skill_bonus = (has_skill(user, SKILL_REPAIR) / 3) + (has_skill(user, SKILL_SCIENCE) / 2);
         user_steal_skill = user_steal_skill + skill_bonus;
         user_sneak_skill = user_sneak_skill + skill_bonus;
      end
      pickpocket = has_trait(TRAIT_PERK, dude_obj, PERK_pickpocket);
      night_vision = has_trait(TRAIT_PERK, dude_obj, PERK_night_vision);
      harmless = has_trait(TRAIT_PERK, dude_obj, PERK_harmless_perk);
      empathy = has_trait(TRAIT_PERK, dude_obj, PERK_empathy);
      thief_perk = has_trait(TRAIT_PERK, dude_obj, PERK_thief_perk);
      master_thief = has_trait(TRAIT_PERK, dude_obj, PERK_master_thief);
      awareness = has_trait(TRAIT_PERK, dude_obj, PERK_bonus_awareness);
      show_irritation_level = empathy + thief_perk + awareness + master_thief;
      tar_gender = get_critter_stat(target, STAT_gender);
      sex_appeal = has_trait(TRAIT_TRAIT, dude_obj, TRAIT_sex_appeal);
      if sex_appeal andAlso (tar_gender - player_gender) == 0 then begin
         sex_appeal = 0;
      end
      light_level = get_light_level;
      user_state = critter_state(dude_obj);
      target_pe = get_critter_stat(target, STAT_pe);
      critter_type = metarule(METARULE_CRITTER_KILL_TYPE, target);
      target_steal_skill = has_skill(target, SKILL_STEAL);
      target_barter_skill = has_skill(target, SKILL_BARTER);
      target_rot = has_trait(TRAIT_OBJECT, target, OBJECT_CUR_ROT);
      target_rot_to_tar = rotation_to_tile(tile_num(target), tile_num(dude_obj));
      team = has_trait(TRAIT_OBJECT, target, OBJECT_TEAM_NUM);
      target_kill_type = critter_kill_type(target);
      taget_state = critter_state(target);
      tar_int = get_critter_stat(target, STAT_iq);
      tar_fid = critter_art_fid(target);
      gvar_value = get_tfsp_gvar_value(cur_town);
      pickpocket_count = is_in_array_last_pickpocket_targets(target, 0) - harmless - sex_appeal;
      was_caught_count = ((pickpocket_count) / (value_caught_stealing));
         // 135 = red / 59 = yell / 74 = green
      if show_irritation_level > 0 then begin
         if was_caught_count <= 0 then begin
            color_print = 74;
         end
         else if was_caught_count <= 1 then begin
            if target_kill_type == KILL_TYPE_robot_kills or military_fid(critter_art_fid(target)) or power_armor_fid(critter_art_fid(target)) then begin
               color_print = 135;
            end
            else begin
               color_print = 59;
            end
         end
         else begin
            if target_kill_type != KILL_TYPE_children_kills then begin
               color_print = 135;
            end
            else begin
               color_print = 59;
            end
         end
      end
      steal_count = 0;
      if MinStealReq <= 0 then begin
         //the ability to steal weapons from hands if the skill is high enough
         right_hand_stolen = -1;
         right_hand_item = -1;
         right_hand_item_pid = -1;
         right_hand_item_copy = -1;
         left_hand_stolen = -1;
         left_hand_item = -1;
         left_hand_item_pid = -1;
         left_hand_item_copy = -1;
         stealing_from_hands = -1;
         right_hand_item_target = -1;
         if MinWpnStealReq > 0 andAlso user_steal_skill >= MinWpnStealReq + target_pe * 5 andAlso not(taget_state BWAND DAM_KNOCKED_DOWN) andAlso not(taget_state BWAND DAM_KNOCKED_OUT) then begin
            right_hand_item = critter_inven_obj2(target, INVEN_TYPE_RIGHT_HAND);
            left_hand_item = critter_inven_obj2(target, INVEN_TYPE_LEFT_HAND);
            right_hand_item_target = target;
            if right_hand_item > 0 then begin
               right_hand_item_pid = obj_pid(right_hand_item);
               right_hand_item_copy = create_object(right_hand_item_pid, tile_num(dude_obj), elevation(dude_obj));
               set_unique_id(right_hand_item_copy);
               add_mult_objs_to_inven(right_hand_item_target, right_hand_item_copy, 1);
               unset_unique_id(right_hand_item_copy);
               stealing_from_hands = 0;
               right_hand_stolen = 0;
            end
            if left_hand_item > 0 then begin
               left_hand_item_pid = obj_pid(left_hand_item);
               left_hand_item_copy = create_object(left_hand_item_pid, tile_num(dude_obj), elevation(dude_obj));
               set_unique_id(left_hand_item_copy);
               add_mult_objs_to_inven(right_hand_item_target, left_hand_item_copy, 1);
               unset_unique_id(left_hand_item_copy);
               stealing_from_hands = 0;
               left_hand_stolen = 0;
            end
         end
      end
      //calculating the minimum skill to get into the target's pocket
      else begin
         // 8-40% penalty to target pe if light lower 50%(or 70% if has night_vision)
         if light_level < 41216 + (night_vision * 21504) andAlso target_kill_type != KILL_TYPE_alien_kills andAlso target_kill_type != KILL_TYPE_robot_kills andAlso target_kill_type != KILL_TYPE_floater_kills then begin
            darkness_penalty = (light_level - (night_vision * 14336)) / 6000.0;
            target_pe_mult = -(7 / (darkness_penalty - 1)) / 1.0; // -2 if 0 light, -0,4 if 50% light
         end
         target_pe_mult = target_pe_mult + 5;
         // Stealing penalty if target's allies can see the thief
         if StealRebalance == 2 then begin
            foreach ally in list_as_array(LIST_CRITTERS) begin
               ally_rot = -6;
               ally_rot_to_tar = -6;
               ally_state = -1;
               ally_cur_frm = -1;
               if ally != dude_obj andAlso ally != target andAlso is_sentient(ally) andAlso obj_is_visible_flag(ally) then begin
                  ally_rot = has_trait(TRAIT_OBJECT, ally, OBJECT_CUR_ROT);
                  ally_rot_to_tar = real_rotation_to_tile(tile_num(ally), tile_num(dude_obj));
                  //ally_rot_to_tar = rotation_to_tile(tile_num(ally), tile_num(dude_obj));
                  ally_team := has_trait(TRAIT_OBJECT, ally, OBJECT_TEAM_NUM);
                  distance_objs(distance, ally, dude_obj);
                  ally_pe = get_critter_stat(ally, STAT_pe);
                  ally_state = critter_state(ally);
                  ally_cur_frm = get_object_data(ally, OBJ_DATA_CUR_FRM);
                  if ally_pe >= 3 andAlso ( (ally_cur_frm == 0) or (crit_is_moving(ally)) ) andAlso not(ally_state bwand (DAM_KNOCKED_OUT bwor DAM_KNOCKED_DOWN bwor DAM_BLIND)) andAlso ally_team == team andAlso (ally_rot == ally_rot_to_tar or ((ally_rot == (ally_rot_to_tar + 1)%6  or ally_rot == (ally_rot_to_tar + 5)%6) andAlso distance <= ally_pe*target_pe_mult/pe_div)) then begin
                     if obj_can_see_obj(ally, dude_obj) then begin
                        float_msg(ally, "?", FLOAT_MSG_YELLOW);
                        //from sides penalty
                        if ally_rot == (ally_rot_to_tar+1)%6 or ally_rot == (ally_rot_to_tar+5)%6 then begin
                           ally_pe = ally_pe - 1;
                        end
                        if ally_pe < 3 then ally_pe = 3;
                        target_pe = target_pe + ally_pe - 2;
                        ally_can_see += 1;
                     end
                  end
               end
            end
         end
            // Minimum required skill mult
         target_pe_mult = target_pe_mult + 3;
            // Conversion of the total perception of all ally witnesses and target's perception into the minimum steal skill requirement
         min_steal_skill = (target_pe * target_pe_mult) + 3;
            // Stealing penalty if the player has already been caught stealing in this city

            // Stealing penalty if target facing the thief
         if pickpocket <= 0 then begin
            if target_rot == target_rot_to_tar  then begin
               if target_can_see_user andAlso gvar_value > 0 then begin
                  min_steal_skill += gvar_value * 5;
               end
               min_steal_skill = min_steal_skill + 30;
               target_pe_mult += 2;
            end
               // Stealing penalty if thief is at the front sides of target
            if target_rot == (target_rot_to_tar + 1) % 6 or target_rot == (target_rot_to_tar + 5) % 6 then begin
               if target_can_see_user andAlso gvar_value > 0 then begin
                  min_steal_skill += gvar_value * 5;
               end
               min_steal_skill = min_steal_skill + 25;
               target_pe_mult += 2;
            end
               // Stealing penalty if target is merchant of MinStealReq == 2. Depends on target's barter skill level
            if MinStealReq >= 2 andAlso target_barter_skill >= 50 then begin
               min_steal_skill = min_steal_skill + (target_barter_skill / 4);
            end
         end

            // Stealing bonus if target is in KO
         if (taget_state BWAND DAM_KNOCKED_DOWN) or (taget_state BWAND DAM_KNOCKED_OUT) or (taget_state BWAND DAM_BLIND) or (taget_state bwand CRITTER_IS_PRONE) then begin
            min_steal_skill = min_steal_skill - 3000;
         end
            // Stealing bonus if target is blind
         if (taget_state BWAND DAM_BLIND) then begin
            min_steal_skill = min_steal_skill - 20;
         end
         // Stealing bonus if critter can't see thief
         if not(target_can_see_user) then begin
            min_steal_skill = min_steal_skill - 20;
            // bonus for sneak
            if using_skill(dude_obj, SKILL_SNEAK) then begin
               min_steal_skill = min_steal_skill - user_sneak_skill / 4;
            end
         end
         // bonus for sneak even if target can see thief
         if target_can_see_user andAlso using_skill(dude_obj, SKILL_SNEAK) then begin
            min_steal_skill = min_steal_skill - user_sneak_skill / 8;
         end
             //Stealing penalty if one arm crippled
         if (user_state BWAND DAM_CRIP_ARM_RIGHT) or (user_state BWAND DAM_CRIP_ARM_LEFT) then begin
            min_steal_skill = (min_steal_skill * 3) / 2;
         end
            // Steal prohibition if both hands are broken
         if (user_state BWAND DAM_CRIP_ARM_RIGHT) andAlso (user_state BWAND DAM_CRIP_ARM_LEFT) then begin
            set_sfall_return(0);
            display_msg(modmsg(msg_hands_broken));
            return;
         end
         min_steal_skill = ceil(min_steal_skill);
         if min_steal_skill < 1 then min_steal_skill = 1;
         if has_skill(user, SKILL_STEAL) < 0 then user_steal_skill = 0;
            // Minimum skill level to open steal interface
         if user_steal_skill < min_steal_skill then begin
            anim_tar_weapon = -1;
            // display a msg if the player has been spotted by the target's allies
            if ally_can_see > 0 then begin
               display_msg(modmsg(msg_witnesses));
            end
            //rnd = random(0 + pickpocket_count, 4 + (2 * pickpocket_count));
            //rnd = 0;
            if target_can_see_user andAlso not(critter_state(target) BWAND DAM_KNOCKED_DOWN) andAlso not(critter_state(target) BWAND DAM_KNOCKED_OUT) then begin
               if pickpocket_count <= random(0,1) then begin
                  call add_timed_event_TURN_BACK(target, game_ticks(random(2, 5)));
                  anim(target, ANIMATE_ROTATION, rotation_to_tile(tile_num(target), tile_num(user)));
                  if target_kill_type != KILL_TYPE_children_kills andAlso not(weak_fid(target)) then begin
                     if pickpocket_count <= 0 then begin
                        if target_kill_type == KILL_TYPE_super_mutant_kills then begin
                           float_msg(target, modmsg(msg_supmut_neutral), FLOAT_COLOR_NORMAL);
                        end
                        else if target_kill_type == KILL_TYPE_robot_kills then begin
                           float_msg(target, modmsg(msg_robot_normal), FLOAT_COLOR_NORMAL);
                        end
                        else begin
                           float_msg(target, modmsg(random(msg_caught1,msg_caught7)), FLOAT_COLOR_NORMAL);
                        end
                     end
                     else begin
                        if target_kill_type == KILL_TYPE_super_mutant_kills then begin
                           float_msg(target, modmsg(msg_supmut_aggressive), FLOAT_COLOR_AFRAID);
                        end
                        else if target_kill_type == KILL_TYPE_robot_kills then begin
                           float_msg(target, modmsg(msg_robot_aggressive), FLOAT_COLOR_AFRAID);
                        end
                        else begin
                           float_msg(target, modmsg(random(msg_caught1,msg_caught7)), FLOAT_COLOR_AFRAID);
                        end
                     end
                  end
                  else begin
                     float_msg(target, modmsg(msg_weak1), FLOAT_MSG_YELLOW);
                  end
                  add_global_timer_event(game_ticks(1), fixed_param_steal);
               end
               else begin
                  if target_kill_type != KILL_TYPE_children_kills andAlso not(weak_fid(target)) then begin
                     if pickpocket_count <= random(2,3) then begin
                        call show_float_msg_death_threat(target);
                        call add_timed_event_ATTACK_DUDE_ON_SIGHT(target,game_ticks(6));
                        anim(target, ANIMATE_ROTATION, rotation_to_tile(tile_num(target), tile_num(user)));
                     end
                     else begin
                        call add_timed_event_TURN_BACK(target,game_ticks(15));
                        call show_float_msg_attack(target);
                        attack_setup(target, user);
                     end
                     add_global_timer_event(game_ticks(1), fixed_param_steal);
                  end
                  else begin
                     if was_caught_count <= 3 then begin
                        call add_timed_event_FLEE_FROM_DUDE(target, 0);
                        anim(target, ANIMATE_ROTATION, rotation_to_tile(tile_num(target), tile_num(user)));
                     end
                     else begin
                        call add_timed_event_TURN_BACK(target,game_ticks(20));
                        call show_float_msg_fear(target);
                        set_tar_flee = target;
                        attack_setup(target, user);
                     end
                     add_global_timer_event(3, fixed_param_steal);
                  end
               end
               call create_arrays_last_pickpocket_targets_and_add_target(target,value_irritation);
            end
            set_sfall_return(0);
            display_msg(modmsg(msg_cant_pickpocket) + parse_str_2(modmsg(msg_cant_plant2), min_steal_skill, 0));
         end
         else begin
            if ECCO_steal_mod <= 0 andAlso steal_chance_win <= 0 then begin
               mouse_add = 0;
               steal_chance_win = 1;
               set_global_script_type(1);
               set_global_script_repeat(2);
            end
            //the ability to steal weapons from hands if the skill is high enough
            right_hand_stolen = -1;
            right_hand_item = -1;
            right_hand_item_pid = -1;
            right_hand_item_copy = -1;
            left_hand_stolen = -1;
            left_hand_item = -1;
            left_hand_item_pid = -1;
            left_hand_item_copy = -1;
            stealing_from_hands = -1;
            right_hand_item_target = -1;
            target_pe = get_critter_stat(target, STAT_pe);
            if MinWpnStealReq > 0 andAlso user_steal_skill >= MinWpnStealReq + target_pe * 5 andAlso not(taget_state BWAND DAM_KNOCKED_DOWN) andAlso not(taget_state BWAND DAM_KNOCKED_OUT) then begin
               right_hand_item = critter_inven_obj2(target, INVEN_TYPE_RIGHT_HAND);
               left_hand_item = critter_inven_obj2(target, INVEN_TYPE_LEFT_HAND);
               right_hand_item_target = target;
               if right_hand_item > 0 then begin
                  right_hand_item_pid = obj_pid(right_hand_item);
                  right_hand_item_copy = create_object(right_hand_item_pid, tile_num(dude_obj), elevation(dude_obj));
                  set_unique_id(right_hand_item_copy);
                  add_mult_objs_to_inven(right_hand_item_target, right_hand_item_copy, 1);
                  unset_unique_id(right_hand_item_copy);
                  stealing_from_hands = 0;
                  right_hand_stolen = 0;
               end
               if left_hand_item > 0 then begin
                  left_hand_item_pid = obj_pid(left_hand_item);
                  left_hand_item_copy = create_object(left_hand_item_pid, tile_num(dude_obj), elevation(dude_obj));
                  set_unique_id(left_hand_item_copy);
                  add_mult_objs_to_inven(right_hand_item_target, left_hand_item_copy, 1);
                  unset_unique_id(left_hand_item_copy);
                  stealing_from_hands = 0;
                  left_hand_stolen = 0;
               end
            end
            anim_tar_weapon = critter_inven_obj(target, INVEN_TYPE_RIGHT_HAND);
            remove_timer_event(fixed_param_steal);
            timer_removed = 1;
            if target != last_pickpocket_target then begin
               if array_exists(stolen_items_ptr_arr) then free_array(stolen_items_ptr_arr);
               if array_exists(stolen_items_quantity_arr) then free_array(stolen_items_quantity_arr);
               if array_exists(planted_items_ptr_arr) then free_array(planted_items_ptr_arr);
               if array_exists(planted_items_quantity_arr) then free_array(planted_items_quantity_arr);
               last_pickpocket_target = target;
            end
         end
      end
   end
end